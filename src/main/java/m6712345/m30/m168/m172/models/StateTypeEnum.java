/*
 * DolphinSchedulerApiDocsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package m6712345.m30.m168.m172.models;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * StateTypeEnum to be used.
 */
public enum StateTypeEnum {
    SUBMITTED_SUCCESS,

    RUNNING_EXECUTION,

    READY_PAUSE,

    PAUSE,

    READY_STOP,

    STOP,

    FAILURE,

    SUCCESS,

    NEED_FAULT_TOLERANCE,

    KILL,

    WAITING_THREAD,

    WAITING_DEPEND,

    DELAY_EXECUTION,

    FORCED_SUCCESS,

    SERIAL_WAIT,

    READY_BLOCK,

    BLOCK,

    DISPATCH;


    private static TreeMap<String, StateTypeEnum> valueMap = new TreeMap<>();
    private String value;

    static {
        SUBMITTED_SUCCESS.value = "SUBMITTED_SUCCESS";
        RUNNING_EXECUTION.value = "RUNNING_EXECUTION";
        READY_PAUSE.value = "READY_PAUSE";
        PAUSE.value = "PAUSE";
        READY_STOP.value = "READY_STOP";
        STOP.value = "STOP";
        FAILURE.value = "FAILURE";
        SUCCESS.value = "SUCCESS";
        NEED_FAULT_TOLERANCE.value = "NEED_FAULT_TOLERANCE";
        KILL.value = "KILL";
        WAITING_THREAD.value = "WAITING_THREAD";
        WAITING_DEPEND.value = "WAITING_DEPEND";
        DELAY_EXECUTION.value = "DELAY_EXECUTION";
        FORCED_SUCCESS.value = "FORCED_SUCCESS";
        SERIAL_WAIT.value = "SERIAL_WAIT";
        READY_BLOCK.value = "READY_BLOCK";
        BLOCK.value = "BLOCK";
        DISPATCH.value = "DISPATCH";

        valueMap.put("SUBMITTED_SUCCESS", SUBMITTED_SUCCESS);
        valueMap.put("RUNNING_EXECUTION", RUNNING_EXECUTION);
        valueMap.put("READY_PAUSE", READY_PAUSE);
        valueMap.put("PAUSE", PAUSE);
        valueMap.put("READY_STOP", READY_STOP);
        valueMap.put("STOP", STOP);
        valueMap.put("FAILURE", FAILURE);
        valueMap.put("SUCCESS", SUCCESS);
        valueMap.put("NEED_FAULT_TOLERANCE", NEED_FAULT_TOLERANCE);
        valueMap.put("KILL", KILL);
        valueMap.put("WAITING_THREAD", WAITING_THREAD);
        valueMap.put("WAITING_DEPEND", WAITING_DEPEND);
        valueMap.put("DELAY_EXECUTION", DELAY_EXECUTION);
        valueMap.put("FORCED_SUCCESS", FORCED_SUCCESS);
        valueMap.put("SERIAL_WAIT", SERIAL_WAIT);
        valueMap.put("READY_BLOCK", READY_BLOCK);
        valueMap.put("BLOCK", BLOCK);
        valueMap.put("DISPATCH", DISPATCH);
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     */
    @com.fasterxml.jackson.annotation.JsonCreator
    public static StateTypeEnum fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member.
     * @return The string value against enum member.
     */
    @com.fasterxml.jackson.annotation.JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of StateTypeEnum values to list of string values.
     * @param toConvert The list of StateTypeEnum values to convert.
     * @return List of representative string values.
     */
    public static List<String> toValue(List<StateTypeEnum> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<String> convertedValues = new ArrayList<>();
        for (StateTypeEnum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 