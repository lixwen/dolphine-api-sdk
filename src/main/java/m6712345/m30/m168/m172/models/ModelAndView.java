/*
 * DolphinSchedulerApiDocsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package m6712345.m30.m168.m172.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.Map;

/**
 * This is a model class for ModelAndView type.
 */
public class ModelAndView {
    private Boolean empty;
    private Object model;
    private Map<String, Object> modelMap;
    private Boolean reference;
    private StatusEnum status;
    private View view;
    private String viewName;

    /**
     * Default constructor.
     */
    public ModelAndView() {
    }

    /**
     * Initialization constructor.
     * @param  empty  Boolean value for empty.
     * @param  model  Object value for model.
     * @param  modelMap  Map of String, value for modelMap.
     * @param  reference  Boolean value for reference.
     * @param  status  StatusEnum value for status.
     * @param  view  View value for view.
     * @param  viewName  String value for viewName.
     */
    public ModelAndView(
            Boolean empty,
            Object model,
            Map<String, Object> modelMap,
            Boolean reference,
            StatusEnum status,
            View view,
            String viewName) {
        this.empty = empty;
        this.model = model;
        this.modelMap = modelMap;
        this.reference = reference;
        this.status = status;
        this.view = view;
        this.viewName = viewName;
    }

    /**
     * Getter for Empty.
     * @return Returns the Boolean
     */
    @JsonGetter("empty")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getEmpty() {
        return empty;
    }

    /**
     * Setter for Empty.
     * @param empty Value for Boolean
     */
    @JsonSetter("empty")
    public void setEmpty(Boolean empty) {
        this.empty = empty;
    }

    /**
     * Getter for Model.
     * @return Returns the Object
     */
    @JsonGetter("model")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getModel() {
        return model;
    }

    /**
     * Setter for Model.
     * @param model Value for Object
     */
    @JsonSetter("model")
    public void setModel(Object model) {
        this.model = model;
    }

    /**
     * Getter for ModelMap.
     * @return Returns the Map of String, Object
     */
    @JsonGetter("modelMap")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Map<String, Object> getModelMap() {
        return modelMap;
    }

    /**
     * Setter for ModelMap.
     * @param modelMap Value for Map of String, Object
     */
    @JsonSetter("modelMap")
    public void setModelMap(Map<String, Object> modelMap) {
        this.modelMap = modelMap;
    }

    /**
     * Getter for Reference.
     * @return Returns the Boolean
     */
    @JsonGetter("reference")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getReference() {
        return reference;
    }

    /**
     * Setter for Reference.
     * @param reference Value for Boolean
     */
    @JsonSetter("reference")
    public void setReference(Boolean reference) {
        this.reference = reference;
    }

    /**
     * Getter for Status.
     * @return Returns the StatusEnum
     */
    @JsonGetter("status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public StatusEnum getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * @param status Value for StatusEnum
     */
    @JsonSetter("status")
    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    /**
     * Getter for View.
     * @return Returns the View
     */
    @JsonGetter("view")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public View getView() {
        return view;
    }

    /**
     * Setter for View.
     * @param view Value for View
     */
    @JsonSetter("view")
    public void setView(View view) {
        this.view = view;
    }

    /**
     * Getter for ViewName.
     * @return Returns the String
     */
    @JsonGetter("viewName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getViewName() {
        return viewName;
    }

    /**
     * Setter for ViewName.
     * @param viewName Value for String
     */
    @JsonSetter("viewName")
    public void setViewName(String viewName) {
        this.viewName = viewName;
    }

    /**
     * Converts this ModelAndView into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ModelAndView [" + "empty=" + empty + ", model=" + model + ", modelMap=" + modelMap
                + ", reference=" + reference + ", status=" + status + ", view=" + view
                + ", viewName=" + viewName + "]";
    }

    /**
     * Builds a new {@link ModelAndView.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ModelAndView.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .empty(getEmpty())
                .model(getModel())
                .modelMap(getModelMap())
                .reference(getReference())
                .status(getStatus())
                .view(getView())
                .viewName(getViewName());
        return builder;
    }

    /**
     * Class to build instances of {@link ModelAndView}.
     */
    public static class Builder {
        private Boolean empty;
        private Object model;
        private Map<String, Object> modelMap;
        private Boolean reference;
        private StatusEnum status;
        private View view;
        private String viewName;



        /**
         * Setter for empty.
         * @param  empty  Boolean value for empty.
         * @return Builder
         */
        public Builder empty(Boolean empty) {
            this.empty = empty;
            return this;
        }

        /**
         * Setter for model.
         * @param  model  Object value for model.
         * @return Builder
         */
        public Builder model(Object model) {
            this.model = model;
            return this;
        }

        /**
         * Setter for modelMap.
         * @param  modelMap  Map of String, value for modelMap.
         * @return Builder
         */
        public Builder modelMap(Map<String, Object> modelMap) {
            this.modelMap = modelMap;
            return this;
        }

        /**
         * Setter for reference.
         * @param  reference  Boolean value for reference.
         * @return Builder
         */
        public Builder reference(Boolean reference) {
            this.reference = reference;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  StatusEnum value for status.
         * @return Builder
         */
        public Builder status(StatusEnum status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for view.
         * @param  view  View value for view.
         * @return Builder
         */
        public Builder view(View view) {
            this.view = view;
            return this;
        }

        /**
         * Setter for viewName.
         * @param  viewName  String value for viewName.
         * @return Builder
         */
        public Builder viewName(String viewName) {
            this.viewName = viewName;
            return this;
        }

        /**
         * Builds a new {@link ModelAndView} object using the set fields.
         * @return {@link ModelAndView}
         */
        public ModelAndView build() {
            return new ModelAndView(empty, model, modelMap, reference, status, view, viewName);
        }
    }
}
