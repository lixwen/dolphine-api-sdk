/*
 * DolphinSchedulerApiDocsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package m6712345.m30.m168.m172.models;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

/**
 * TypeEnum to be used.
 */
public enum TypeEnum {
    MYSQL,

    POSTGRESQL,

    HIVE,

    SPARK,

    CLICKHOUSE,

    ORACLE,

    SQLSERVER,

    DB2,

    PRESTO,

    H2,

    REDSHIFT;


    private static TreeMap<String, TypeEnum> valueMap = new TreeMap<>();
    private String value;

    static {
        MYSQL.value = "MYSQL";
        POSTGRESQL.value = "POSTGRESQL";
        HIVE.value = "HIVE";
        SPARK.value = "SPARK";
        CLICKHOUSE.value = "CLICKHOUSE";
        ORACLE.value = "ORACLE";
        SQLSERVER.value = "SQLSERVER";
        DB2.value = "DB2";
        PRESTO.value = "PRESTO";
        H2.value = "H2";
        REDSHIFT.value = "REDSHIFT";

        valueMap.put("MYSQL", MYSQL);
        valueMap.put("POSTGRESQL", POSTGRESQL);
        valueMap.put("HIVE", HIVE);
        valueMap.put("SPARK", SPARK);
        valueMap.put("CLICKHOUSE", CLICKHOUSE);
        valueMap.put("ORACLE", ORACLE);
        valueMap.put("SQLSERVER", SQLSERVER);
        valueMap.put("DB2", DB2);
        valueMap.put("PRESTO", PRESTO);
        valueMap.put("H2", H2);
        valueMap.put("REDSHIFT", REDSHIFT);
    }

    /**
     * Returns the enum member associated with the given string value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given string value.
     */
    @com.fasterxml.jackson.annotation.JsonCreator
    public static TypeEnum fromString(String toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the string value associated with the enum member.
     * @return The string value against enum member.
     */
    @com.fasterxml.jackson.annotation.JsonValue
    public String value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of TypeEnum values to list of string values.
     * @param toConvert The list of TypeEnum values to convert.
     * @return List of representative string values.
     */
    public static List<String> toValue(List<TypeEnum> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<String> convertedValues = new ArrayList<>();
        for (TypeEnum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 