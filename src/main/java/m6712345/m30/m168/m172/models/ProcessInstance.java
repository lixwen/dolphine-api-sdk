/*
 * DolphinSchedulerApiDocsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package m6712345.m30.m168.m172.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.LocalDateTime;
import m6712345.m30.m168.m172.DateTimeHelper;

/**
 * This is a model class for ProcessInstance type.
 */
public class ProcessInstance {
    private Boolean blocked;
    private CmdTypeIfComplementEnum cmdTypeIfComplement;
    private String commandParam;
    private LocalDateTime commandStartTime;
    private CommandTypeEnum commandType;
    private Boolean complementData;
    private DagData dagData;
    private String dependenceScheduleTimes;
    private Integer dryRun;
    private String duration;
    private LocalDateTime endTime;
    private Long environmentCode;
    private Integer executorId;
    private String executorName;
    private FailureStrategyEnum failureStrategy;
    private String globalParams;
    private String historyCmd;
    private String host;
    private Integer id;
    private IsSubProcessEnum isSubProcess;
    private String locations;
    private Integer maxTryTimes;
    private String name;
    private Integer nextProcessInstanceId;
    private ProcessDefinition processDefinition;
    private Long processDefinitionCode;
    private Integer processDefinitionVersion;
    private ProcessInstancePriorityEnum processInstancePriority;
    private Boolean processInstanceStop;
    private String queue;
    private RecoveryEnum recovery;
    private LocalDateTime restartTime;
    private Integer runTimes;
    private LocalDateTime scheduleTime;
    private LocalDateTime startTime;
    private StateEnum state;
    private TaskDependTypeEnum taskDependType;
    private String tenantCode;
    private Integer tenantId;
    private Integer timeout;
    private String varPool;
    private Integer warningGroupId;
    private WarningTypeEnum warningType;
    private String workerGroup;

    /**
     * Default constructor.
     */
    public ProcessInstance() {
    }

    /**
     * Initialization constructor.
     * @param  blocked  Boolean value for blocked.
     * @param  cmdTypeIfComplement  CmdTypeIfComplementEnum value for cmdTypeIfComplement.
     * @param  commandParam  String value for commandParam.
     * @param  commandStartTime  LocalDateTime value for commandStartTime.
     * @param  commandType  CommandTypeEnum value for commandType.
     * @param  complementData  Boolean value for complementData.
     * @param  dagData  DagData value for dagData.
     * @param  dependenceScheduleTimes  String value for dependenceScheduleTimes.
     * @param  dryRun  Integer value for dryRun.
     * @param  duration  String value for duration.
     * @param  endTime  LocalDateTime value for endTime.
     * @param  environmentCode  Long value for environmentCode.
     * @param  executorId  Integer value for executorId.
     * @param  executorName  String value for executorName.
     * @param  failureStrategy  FailureStrategyEnum value for failureStrategy.
     * @param  globalParams  String value for globalParams.
     * @param  historyCmd  String value for historyCmd.
     * @param  host  String value for host.
     * @param  id  Integer value for id.
     * @param  isSubProcess  IsSubProcessEnum value for isSubProcess.
     * @param  locations  String value for locations.
     * @param  maxTryTimes  Integer value for maxTryTimes.
     * @param  name  String value for name.
     * @param  nextProcessInstanceId  Integer value for nextProcessInstanceId.
     * @param  processDefinition  ProcessDefinition value for processDefinition.
     * @param  processDefinitionCode  Long value for processDefinitionCode.
     * @param  processDefinitionVersion  Integer value for processDefinitionVersion.
     * @param  processInstancePriority  ProcessInstancePriorityEnum value for
     *         processInstancePriority.
     * @param  processInstanceStop  Boolean value for processInstanceStop.
     * @param  queue  String value for queue.
     * @param  recovery  RecoveryEnum value for recovery.
     * @param  restartTime  LocalDateTime value for restartTime.
     * @param  runTimes  Integer value for runTimes.
     * @param  scheduleTime  LocalDateTime value for scheduleTime.
     * @param  startTime  LocalDateTime value for startTime.
     * @param  state  StateEnum value for state.
     * @param  taskDependType  TaskDependTypeEnum value for taskDependType.
     * @param  tenantCode  String value for tenantCode.
     * @param  tenantId  Integer value for tenantId.
     * @param  timeout  Integer value for timeout.
     * @param  varPool  String value for varPool.
     * @param  warningGroupId  Integer value for warningGroupId.
     * @param  warningType  WarningTypeEnum value for warningType.
     * @param  workerGroup  String value for workerGroup.
     */
    public ProcessInstance(
            Boolean blocked,
            CmdTypeIfComplementEnum cmdTypeIfComplement,
            String commandParam,
            LocalDateTime commandStartTime,
            CommandTypeEnum commandType,
            Boolean complementData,
            DagData dagData,
            String dependenceScheduleTimes,
            Integer dryRun,
            String duration,
            LocalDateTime endTime,
            Long environmentCode,
            Integer executorId,
            String executorName,
            FailureStrategyEnum failureStrategy,
            String globalParams,
            String historyCmd,
            String host,
            Integer id,
            IsSubProcessEnum isSubProcess,
            String locations,
            Integer maxTryTimes,
            String name,
            Integer nextProcessInstanceId,
            ProcessDefinition processDefinition,
            Long processDefinitionCode,
            Integer processDefinitionVersion,
            ProcessInstancePriorityEnum processInstancePriority,
            Boolean processInstanceStop,
            String queue,
            RecoveryEnum recovery,
            LocalDateTime restartTime,
            Integer runTimes,
            LocalDateTime scheduleTime,
            LocalDateTime startTime,
            StateEnum state,
            TaskDependTypeEnum taskDependType,
            String tenantCode,
            Integer tenantId,
            Integer timeout,
            String varPool,
            Integer warningGroupId,
            WarningTypeEnum warningType,
            String workerGroup) {
        this.blocked = blocked;
        this.cmdTypeIfComplement = cmdTypeIfComplement;
        this.commandParam = commandParam;
        this.commandStartTime = commandStartTime;
        this.commandType = commandType;
        this.complementData = complementData;
        this.dagData = dagData;
        this.dependenceScheduleTimes = dependenceScheduleTimes;
        this.dryRun = dryRun;
        this.duration = duration;
        this.endTime = endTime;
        this.environmentCode = environmentCode;
        this.executorId = executorId;
        this.executorName = executorName;
        this.failureStrategy = failureStrategy;
        this.globalParams = globalParams;
        this.historyCmd = historyCmd;
        this.host = host;
        this.id = id;
        this.isSubProcess = isSubProcess;
        this.locations = locations;
        this.maxTryTimes = maxTryTimes;
        this.name = name;
        this.nextProcessInstanceId = nextProcessInstanceId;
        this.processDefinition = processDefinition;
        this.processDefinitionCode = processDefinitionCode;
        this.processDefinitionVersion = processDefinitionVersion;
        this.processInstancePriority = processInstancePriority;
        this.processInstanceStop = processInstanceStop;
        this.queue = queue;
        this.recovery = recovery;
        this.restartTime = restartTime;
        this.runTimes = runTimes;
        this.scheduleTime = scheduleTime;
        this.startTime = startTime;
        this.state = state;
        this.taskDependType = taskDependType;
        this.tenantCode = tenantCode;
        this.tenantId = tenantId;
        this.timeout = timeout;
        this.varPool = varPool;
        this.warningGroupId = warningGroupId;
        this.warningType = warningType;
        this.workerGroup = workerGroup;
    }

    /**
     * Getter for Blocked.
     * @return Returns the Boolean
     */
    @JsonGetter("blocked")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getBlocked() {
        return blocked;
    }

    /**
     * Setter for Blocked.
     * @param blocked Value for Boolean
     */
    @JsonSetter("blocked")
    public void setBlocked(Boolean blocked) {
        this.blocked = blocked;
    }

    /**
     * Getter for CmdTypeIfComplement.
     * @return Returns the CmdTypeIfComplementEnum
     */
    @JsonGetter("cmdTypeIfComplement")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CmdTypeIfComplementEnum getCmdTypeIfComplement() {
        return cmdTypeIfComplement;
    }

    /**
     * Setter for CmdTypeIfComplement.
     * @param cmdTypeIfComplement Value for CmdTypeIfComplementEnum
     */
    @JsonSetter("cmdTypeIfComplement")
    public void setCmdTypeIfComplement(CmdTypeIfComplementEnum cmdTypeIfComplement) {
        this.cmdTypeIfComplement = cmdTypeIfComplement;
    }

    /**
     * Getter for CommandParam.
     * @return Returns the String
     */
    @JsonGetter("commandParam")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCommandParam() {
        return commandParam;
    }

    /**
     * Setter for CommandParam.
     * @param commandParam Value for String
     */
    @JsonSetter("commandParam")
    public void setCommandParam(String commandParam) {
        this.commandParam = commandParam;
    }

    /**
     * Getter for CommandStartTime.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("commandStartTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getCommandStartTime() {
        return commandStartTime;
    }

    /**
     * Setter for CommandStartTime.
     * @param commandStartTime Value for LocalDateTime
     */
    @JsonSetter("commandStartTime")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setCommandStartTime(LocalDateTime commandStartTime) {
        this.commandStartTime = commandStartTime;
    }

    /**
     * Getter for CommandType.
     * @return Returns the CommandTypeEnum
     */
    @JsonGetter("commandType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public CommandTypeEnum getCommandType() {
        return commandType;
    }

    /**
     * Setter for CommandType.
     * @param commandType Value for CommandTypeEnum
     */
    @JsonSetter("commandType")
    public void setCommandType(CommandTypeEnum commandType) {
        this.commandType = commandType;
    }

    /**
     * Getter for ComplementData.
     * @return Returns the Boolean
     */
    @JsonGetter("complementData")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getComplementData() {
        return complementData;
    }

    /**
     * Setter for ComplementData.
     * @param complementData Value for Boolean
     */
    @JsonSetter("complementData")
    public void setComplementData(Boolean complementData) {
        this.complementData = complementData;
    }

    /**
     * Getter for DagData.
     * @return Returns the DagData
     */
    @JsonGetter("dagData")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public DagData getDagData() {
        return dagData;
    }

    /**
     * Setter for DagData.
     * @param dagData Value for DagData
     */
    @JsonSetter("dagData")
    public void setDagData(DagData dagData) {
        this.dagData = dagData;
    }

    /**
     * Getter for DependenceScheduleTimes.
     * @return Returns the String
     */
    @JsonGetter("dependenceScheduleTimes")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDependenceScheduleTimes() {
        return dependenceScheduleTimes;
    }

    /**
     * Setter for DependenceScheduleTimes.
     * @param dependenceScheduleTimes Value for String
     */
    @JsonSetter("dependenceScheduleTimes")
    public void setDependenceScheduleTimes(String dependenceScheduleTimes) {
        this.dependenceScheduleTimes = dependenceScheduleTimes;
    }

    /**
     * Getter for DryRun.
     * @return Returns the Integer
     */
    @JsonGetter("dryRun")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getDryRun() {
        return dryRun;
    }

    /**
     * Setter for DryRun.
     * @param dryRun Value for Integer
     */
    @JsonSetter("dryRun")
    public void setDryRun(Integer dryRun) {
        this.dryRun = dryRun;
    }

    /**
     * Getter for Duration.
     * @return Returns the String
     */
    @JsonGetter("duration")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDuration() {
        return duration;
    }

    /**
     * Setter for Duration.
     * @param duration Value for String
     */
    @JsonSetter("duration")
    public void setDuration(String duration) {
        this.duration = duration;
    }

    /**
     * Getter for EndTime.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("endTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getEndTime() {
        return endTime;
    }

    /**
     * Setter for EndTime.
     * @param endTime Value for LocalDateTime
     */
    @JsonSetter("endTime")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setEndTime(LocalDateTime endTime) {
        this.endTime = endTime;
    }

    /**
     * Getter for EnvironmentCode.
     * @return Returns the Long
     */
    @JsonGetter("environmentCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getEnvironmentCode() {
        return environmentCode;
    }

    /**
     * Setter for EnvironmentCode.
     * @param environmentCode Value for Long
     */
    @JsonSetter("environmentCode")
    public void setEnvironmentCode(Long environmentCode) {
        this.environmentCode = environmentCode;
    }

    /**
     * Getter for ExecutorId.
     * @return Returns the Integer
     */
    @JsonGetter("executorId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getExecutorId() {
        return executorId;
    }

    /**
     * Setter for ExecutorId.
     * @param executorId Value for Integer
     */
    @JsonSetter("executorId")
    public void setExecutorId(Integer executorId) {
        this.executorId = executorId;
    }

    /**
     * Getter for ExecutorName.
     * @return Returns the String
     */
    @JsonGetter("executorName")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getExecutorName() {
        return executorName;
    }

    /**
     * Setter for ExecutorName.
     * @param executorName Value for String
     */
    @JsonSetter("executorName")
    public void setExecutorName(String executorName) {
        this.executorName = executorName;
    }

    /**
     * Getter for FailureStrategy.
     * @return Returns the FailureStrategyEnum
     */
    @JsonGetter("failureStrategy")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public FailureStrategyEnum getFailureStrategy() {
        return failureStrategy;
    }

    /**
     * Setter for FailureStrategy.
     * @param failureStrategy Value for FailureStrategyEnum
     */
    @JsonSetter("failureStrategy")
    public void setFailureStrategy(FailureStrategyEnum failureStrategy) {
        this.failureStrategy = failureStrategy;
    }

    /**
     * Getter for GlobalParams.
     * @return Returns the String
     */
    @JsonGetter("globalParams")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getGlobalParams() {
        return globalParams;
    }

    /**
     * Setter for GlobalParams.
     * @param globalParams Value for String
     */
    @JsonSetter("globalParams")
    public void setGlobalParams(String globalParams) {
        this.globalParams = globalParams;
    }

    /**
     * Getter for HistoryCmd.
     * @return Returns the String
     */
    @JsonGetter("historyCmd")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHistoryCmd() {
        return historyCmd;
    }

    /**
     * Setter for HistoryCmd.
     * @param historyCmd Value for String
     */
    @JsonSetter("historyCmd")
    public void setHistoryCmd(String historyCmd) {
        this.historyCmd = historyCmd;
    }

    /**
     * Getter for Host.
     * @return Returns the String
     */
    @JsonGetter("host")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getHost() {
        return host;
    }

    /**
     * Setter for Host.
     * @param host Value for String
     */
    @JsonSetter("host")
    public void setHost(String host) {
        this.host = host;
    }

    /**
     * Getter for Id.
     * @return Returns the Integer
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for Integer
     */
    @JsonSetter("id")
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for IsSubProcess.
     * @return Returns the IsSubProcessEnum
     */
    @JsonGetter("isSubProcess")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public IsSubProcessEnum getIsSubProcess() {
        return isSubProcess;
    }

    /**
     * Setter for IsSubProcess.
     * @param isSubProcess Value for IsSubProcessEnum
     */
    @JsonSetter("isSubProcess")
    public void setIsSubProcess(IsSubProcessEnum isSubProcess) {
        this.isSubProcess = isSubProcess;
    }

    /**
     * Getter for Locations.
     * @return Returns the String
     */
    @JsonGetter("locations")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLocations() {
        return locations;
    }

    /**
     * Setter for Locations.
     * @param locations Value for String
     */
    @JsonSetter("locations")
    public void setLocations(String locations) {
        this.locations = locations;
    }

    /**
     * Getter for MaxTryTimes.
     * @return Returns the Integer
     */
    @JsonGetter("maxTryTimes")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getMaxTryTimes() {
        return maxTryTimes;
    }

    /**
     * Setter for MaxTryTimes.
     * @param maxTryTimes Value for Integer
     */
    @JsonSetter("maxTryTimes")
    public void setMaxTryTimes(Integer maxTryTimes) {
        this.maxTryTimes = maxTryTimes;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for NextProcessInstanceId.
     * @return Returns the Integer
     */
    @JsonGetter("nextProcessInstanceId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getNextProcessInstanceId() {
        return nextProcessInstanceId;
    }

    /**
     * Setter for NextProcessInstanceId.
     * @param nextProcessInstanceId Value for Integer
     */
    @JsonSetter("nextProcessInstanceId")
    public void setNextProcessInstanceId(Integer nextProcessInstanceId) {
        this.nextProcessInstanceId = nextProcessInstanceId;
    }

    /**
     * Getter for ProcessDefinition.
     * @return Returns the ProcessDefinition
     */
    @JsonGetter("processDefinition")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ProcessDefinition getProcessDefinition() {
        return processDefinition;
    }

    /**
     * Setter for ProcessDefinition.
     * @param processDefinition Value for ProcessDefinition
     */
    @JsonSetter("processDefinition")
    public void setProcessDefinition(ProcessDefinition processDefinition) {
        this.processDefinition = processDefinition;
    }

    /**
     * Getter for ProcessDefinitionCode.
     * @return Returns the Long
     */
    @JsonGetter("processDefinitionCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getProcessDefinitionCode() {
        return processDefinitionCode;
    }

    /**
     * Setter for ProcessDefinitionCode.
     * @param processDefinitionCode Value for Long
     */
    @JsonSetter("processDefinitionCode")
    public void setProcessDefinitionCode(Long processDefinitionCode) {
        this.processDefinitionCode = processDefinitionCode;
    }

    /**
     * Getter for ProcessDefinitionVersion.
     * @return Returns the Integer
     */
    @JsonGetter("processDefinitionVersion")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getProcessDefinitionVersion() {
        return processDefinitionVersion;
    }

    /**
     * Setter for ProcessDefinitionVersion.
     * @param processDefinitionVersion Value for Integer
     */
    @JsonSetter("processDefinitionVersion")
    public void setProcessDefinitionVersion(Integer processDefinitionVersion) {
        this.processDefinitionVersion = processDefinitionVersion;
    }

    /**
     * Getter for ProcessInstancePriority.
     * @return Returns the ProcessInstancePriorityEnum
     */
    @JsonGetter("processInstancePriority")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ProcessInstancePriorityEnum getProcessInstancePriority() {
        return processInstancePriority;
    }

    /**
     * Setter for ProcessInstancePriority.
     * @param processInstancePriority Value for ProcessInstancePriorityEnum
     */
    @JsonSetter("processInstancePriority")
    public void setProcessInstancePriority(ProcessInstancePriorityEnum processInstancePriority) {
        this.processInstancePriority = processInstancePriority;
    }

    /**
     * Getter for ProcessInstanceStop.
     * @return Returns the Boolean
     */
    @JsonGetter("processInstanceStop")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getProcessInstanceStop() {
        return processInstanceStop;
    }

    /**
     * Setter for ProcessInstanceStop.
     * @param processInstanceStop Value for Boolean
     */
    @JsonSetter("processInstanceStop")
    public void setProcessInstanceStop(Boolean processInstanceStop) {
        this.processInstanceStop = processInstanceStop;
    }

    /**
     * Getter for Queue.
     * @return Returns the String
     */
    @JsonGetter("queue")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getQueue() {
        return queue;
    }

    /**
     * Setter for Queue.
     * @param queue Value for String
     */
    @JsonSetter("queue")
    public void setQueue(String queue) {
        this.queue = queue;
    }

    /**
     * Getter for Recovery.
     * @return Returns the RecoveryEnum
     */
    @JsonGetter("recovery")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public RecoveryEnum getRecovery() {
        return recovery;
    }

    /**
     * Setter for Recovery.
     * @param recovery Value for RecoveryEnum
     */
    @JsonSetter("recovery")
    public void setRecovery(RecoveryEnum recovery) {
        this.recovery = recovery;
    }

    /**
     * Getter for RestartTime.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("restartTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getRestartTime() {
        return restartTime;
    }

    /**
     * Setter for RestartTime.
     * @param restartTime Value for LocalDateTime
     */
    @JsonSetter("restartTime")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setRestartTime(LocalDateTime restartTime) {
        this.restartTime = restartTime;
    }

    /**
     * Getter for RunTimes.
     * @return Returns the Integer
     */
    @JsonGetter("runTimes")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getRunTimes() {
        return runTimes;
    }

    /**
     * Setter for RunTimes.
     * @param runTimes Value for Integer
     */
    @JsonSetter("runTimes")
    public void setRunTimes(Integer runTimes) {
        this.runTimes = runTimes;
    }

    /**
     * Getter for ScheduleTime.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("scheduleTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getScheduleTime() {
        return scheduleTime;
    }

    /**
     * Setter for ScheduleTime.
     * @param scheduleTime Value for LocalDateTime
     */
    @JsonSetter("scheduleTime")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setScheduleTime(LocalDateTime scheduleTime) {
        this.scheduleTime = scheduleTime;
    }

    /**
     * Getter for StartTime.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("startTime")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getStartTime() {
        return startTime;
    }

    /**
     * Setter for StartTime.
     * @param startTime Value for LocalDateTime
     */
    @JsonSetter("startTime")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setStartTime(LocalDateTime startTime) {
        this.startTime = startTime;
    }

    /**
     * Getter for State.
     * @return Returns the StateEnum
     */
    @JsonGetter("state")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public StateEnum getState() {
        return state;
    }

    /**
     * Setter for State.
     * @param state Value for StateEnum
     */
    @JsonSetter("state")
    public void setState(StateEnum state) {
        this.state = state;
    }

    /**
     * Getter for TaskDependType.
     * @return Returns the TaskDependTypeEnum
     */
    @JsonGetter("taskDependType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TaskDependTypeEnum getTaskDependType() {
        return taskDependType;
    }

    /**
     * Setter for TaskDependType.
     * @param taskDependType Value for TaskDependTypeEnum
     */
    @JsonSetter("taskDependType")
    public void setTaskDependType(TaskDependTypeEnum taskDependType) {
        this.taskDependType = taskDependType;
    }

    /**
     * Getter for TenantCode.
     * @return Returns the String
     */
    @JsonGetter("tenantCode")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTenantCode() {
        return tenantCode;
    }

    /**
     * Setter for TenantCode.
     * @param tenantCode Value for String
     */
    @JsonSetter("tenantCode")
    public void setTenantCode(String tenantCode) {
        this.tenantCode = tenantCode;
    }

    /**
     * Getter for TenantId.
     * @return Returns the Integer
     */
    @JsonGetter("tenantId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTenantId() {
        return tenantId;
    }

    /**
     * Setter for TenantId.
     * @param tenantId Value for Integer
     */
    @JsonSetter("tenantId")
    public void setTenantId(Integer tenantId) {
        this.tenantId = tenantId;
    }

    /**
     * Getter for Timeout.
     * @return Returns the Integer
     */
    @JsonGetter("timeout")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTimeout() {
        return timeout;
    }

    /**
     * Setter for Timeout.
     * @param timeout Value for Integer
     */
    @JsonSetter("timeout")
    public void setTimeout(Integer timeout) {
        this.timeout = timeout;
    }

    /**
     * Getter for VarPool.
     * @return Returns the String
     */
    @JsonGetter("varPool")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getVarPool() {
        return varPool;
    }

    /**
     * Setter for VarPool.
     * @param varPool Value for String
     */
    @JsonSetter("varPool")
    public void setVarPool(String varPool) {
        this.varPool = varPool;
    }

    /**
     * Getter for WarningGroupId.
     * @return Returns the Integer
     */
    @JsonGetter("warningGroupId")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getWarningGroupId() {
        return warningGroupId;
    }

    /**
     * Setter for WarningGroupId.
     * @param warningGroupId Value for Integer
     */
    @JsonSetter("warningGroupId")
    public void setWarningGroupId(Integer warningGroupId) {
        this.warningGroupId = warningGroupId;
    }

    /**
     * Getter for WarningType.
     * @return Returns the WarningTypeEnum
     */
    @JsonGetter("warningType")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public WarningTypeEnum getWarningType() {
        return warningType;
    }

    /**
     * Setter for WarningType.
     * @param warningType Value for WarningTypeEnum
     */
    @JsonSetter("warningType")
    public void setWarningType(WarningTypeEnum warningType) {
        this.warningType = warningType;
    }

    /**
     * Getter for WorkerGroup.
     * @return Returns the String
     */
    @JsonGetter("workerGroup")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getWorkerGroup() {
        return workerGroup;
    }

    /**
     * Setter for WorkerGroup.
     * @param workerGroup Value for String
     */
    @JsonSetter("workerGroup")
    public void setWorkerGroup(String workerGroup) {
        this.workerGroup = workerGroup;
    }

    /**
     * Converts this ProcessInstance into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "ProcessInstance [" + "blocked=" + blocked + ", cmdTypeIfComplement="
                + cmdTypeIfComplement + ", commandParam=" + commandParam + ", commandStartTime="
                + commandStartTime + ", commandType=" + commandType + ", complementData="
                + complementData + ", dagData=" + dagData + ", dependenceScheduleTimes="
                + dependenceScheduleTimes + ", dryRun=" + dryRun + ", duration=" + duration
                + ", endTime=" + endTime + ", environmentCode=" + environmentCode + ", executorId="
                + executorId + ", executorName=" + executorName + ", failureStrategy="
                + failureStrategy + ", globalParams=" + globalParams + ", historyCmd=" + historyCmd
                + ", host=" + host + ", id=" + id + ", isSubProcess=" + isSubProcess
                + ", locations=" + locations + ", maxTryTimes=" + maxTryTimes + ", name=" + name
                + ", nextProcessInstanceId=" + nextProcessInstanceId + ", processDefinition="
                + processDefinition + ", processDefinitionCode=" + processDefinitionCode
                + ", processDefinitionVersion=" + processDefinitionVersion
                + ", processInstancePriority=" + processInstancePriority + ", processInstanceStop="
                + processInstanceStop + ", queue=" + queue + ", recovery=" + recovery
                + ", restartTime=" + restartTime + ", runTimes=" + runTimes + ", scheduleTime="
                + scheduleTime + ", startTime=" + startTime + ", state=" + state
                + ", taskDependType=" + taskDependType + ", tenantCode=" + tenantCode
                + ", tenantId=" + tenantId + ", timeout=" + timeout + ", varPool=" + varPool
                + ", warningGroupId=" + warningGroupId + ", warningType=" + warningType
                + ", workerGroup=" + workerGroup + "]";
    }

    /**
     * Builds a new {@link ProcessInstance.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link ProcessInstance.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .blocked(getBlocked())
                .cmdTypeIfComplement(getCmdTypeIfComplement())
                .commandParam(getCommandParam())
                .commandStartTime(getCommandStartTime())
                .commandType(getCommandType())
                .complementData(getComplementData())
                .dagData(getDagData())
                .dependenceScheduleTimes(getDependenceScheduleTimes())
                .dryRun(getDryRun())
                .duration(getDuration())
                .endTime(getEndTime())
                .environmentCode(getEnvironmentCode())
                .executorId(getExecutorId())
                .executorName(getExecutorName())
                .failureStrategy(getFailureStrategy())
                .globalParams(getGlobalParams())
                .historyCmd(getHistoryCmd())
                .host(getHost())
                .id(getId())
                .isSubProcess(getIsSubProcess())
                .locations(getLocations())
                .maxTryTimes(getMaxTryTimes())
                .name(getName())
                .nextProcessInstanceId(getNextProcessInstanceId())
                .processDefinition(getProcessDefinition())
                .processDefinitionCode(getProcessDefinitionCode())
                .processDefinitionVersion(getProcessDefinitionVersion())
                .processInstancePriority(getProcessInstancePriority())
                .processInstanceStop(getProcessInstanceStop())
                .queue(getQueue())
                .recovery(getRecovery())
                .restartTime(getRestartTime())
                .runTimes(getRunTimes())
                .scheduleTime(getScheduleTime())
                .startTime(getStartTime())
                .state(getState())
                .taskDependType(getTaskDependType())
                .tenantCode(getTenantCode())
                .tenantId(getTenantId())
                .timeout(getTimeout())
                .varPool(getVarPool())
                .warningGroupId(getWarningGroupId())
                .warningType(getWarningType())
                .workerGroup(getWorkerGroup());
        return builder;
    }

    /**
     * Class to build instances of {@link ProcessInstance}.
     */
    public static class Builder {
        private Boolean blocked;
        private CmdTypeIfComplementEnum cmdTypeIfComplement;
        private String commandParam;
        private LocalDateTime commandStartTime;
        private CommandTypeEnum commandType;
        private Boolean complementData;
        private DagData dagData;
        private String dependenceScheduleTimes;
        private Integer dryRun;
        private String duration;
        private LocalDateTime endTime;
        private Long environmentCode;
        private Integer executorId;
        private String executorName;
        private FailureStrategyEnum failureStrategy;
        private String globalParams;
        private String historyCmd;
        private String host;
        private Integer id;
        private IsSubProcessEnum isSubProcess;
        private String locations;
        private Integer maxTryTimes;
        private String name;
        private Integer nextProcessInstanceId;
        private ProcessDefinition processDefinition;
        private Long processDefinitionCode;
        private Integer processDefinitionVersion;
        private ProcessInstancePriorityEnum processInstancePriority;
        private Boolean processInstanceStop;
        private String queue;
        private RecoveryEnum recovery;
        private LocalDateTime restartTime;
        private Integer runTimes;
        private LocalDateTime scheduleTime;
        private LocalDateTime startTime;
        private StateEnum state;
        private TaskDependTypeEnum taskDependType;
        private String tenantCode;
        private Integer tenantId;
        private Integer timeout;
        private String varPool;
        private Integer warningGroupId;
        private WarningTypeEnum warningType;
        private String workerGroup;



        /**
         * Setter for blocked.
         * @param  blocked  Boolean value for blocked.
         * @return Builder
         */
        public Builder blocked(Boolean blocked) {
            this.blocked = blocked;
            return this;
        }

        /**
         * Setter for cmdTypeIfComplement.
         * @param  cmdTypeIfComplement  CmdTypeIfComplementEnum value for cmdTypeIfComplement.
         * @return Builder
         */
        public Builder cmdTypeIfComplement(CmdTypeIfComplementEnum cmdTypeIfComplement) {
            this.cmdTypeIfComplement = cmdTypeIfComplement;
            return this;
        }

        /**
         * Setter for commandParam.
         * @param  commandParam  String value for commandParam.
         * @return Builder
         */
        public Builder commandParam(String commandParam) {
            this.commandParam = commandParam;
            return this;
        }

        /**
         * Setter for commandStartTime.
         * @param  commandStartTime  LocalDateTime value for commandStartTime.
         * @return Builder
         */
        public Builder commandStartTime(LocalDateTime commandStartTime) {
            this.commandStartTime = commandStartTime;
            return this;
        }

        /**
         * Setter for commandType.
         * @param  commandType  CommandTypeEnum value for commandType.
         * @return Builder
         */
        public Builder commandType(CommandTypeEnum commandType) {
            this.commandType = commandType;
            return this;
        }

        /**
         * Setter for complementData.
         * @param  complementData  Boolean value for complementData.
         * @return Builder
         */
        public Builder complementData(Boolean complementData) {
            this.complementData = complementData;
            return this;
        }

        /**
         * Setter for dagData.
         * @param  dagData  DagData value for dagData.
         * @return Builder
         */
        public Builder dagData(DagData dagData) {
            this.dagData = dagData;
            return this;
        }

        /**
         * Setter for dependenceScheduleTimes.
         * @param  dependenceScheduleTimes  String value for dependenceScheduleTimes.
         * @return Builder
         */
        public Builder dependenceScheduleTimes(String dependenceScheduleTimes) {
            this.dependenceScheduleTimes = dependenceScheduleTimes;
            return this;
        }

        /**
         * Setter for dryRun.
         * @param  dryRun  Integer value for dryRun.
         * @return Builder
         */
        public Builder dryRun(Integer dryRun) {
            this.dryRun = dryRun;
            return this;
        }

        /**
         * Setter for duration.
         * @param  duration  String value for duration.
         * @return Builder
         */
        public Builder duration(String duration) {
            this.duration = duration;
            return this;
        }

        /**
         * Setter for endTime.
         * @param  endTime  LocalDateTime value for endTime.
         * @return Builder
         */
        public Builder endTime(LocalDateTime endTime) {
            this.endTime = endTime;
            return this;
        }

        /**
         * Setter for environmentCode.
         * @param  environmentCode  Long value for environmentCode.
         * @return Builder
         */
        public Builder environmentCode(Long environmentCode) {
            this.environmentCode = environmentCode;
            return this;
        }

        /**
         * Setter for executorId.
         * @param  executorId  Integer value for executorId.
         * @return Builder
         */
        public Builder executorId(Integer executorId) {
            this.executorId = executorId;
            return this;
        }

        /**
         * Setter for executorName.
         * @param  executorName  String value for executorName.
         * @return Builder
         */
        public Builder executorName(String executorName) {
            this.executorName = executorName;
            return this;
        }

        /**
         * Setter for failureStrategy.
         * @param  failureStrategy  FailureStrategyEnum value for failureStrategy.
         * @return Builder
         */
        public Builder failureStrategy(FailureStrategyEnum failureStrategy) {
            this.failureStrategy = failureStrategy;
            return this;
        }

        /**
         * Setter for globalParams.
         * @param  globalParams  String value for globalParams.
         * @return Builder
         */
        public Builder globalParams(String globalParams) {
            this.globalParams = globalParams;
            return this;
        }

        /**
         * Setter for historyCmd.
         * @param  historyCmd  String value for historyCmd.
         * @return Builder
         */
        public Builder historyCmd(String historyCmd) {
            this.historyCmd = historyCmd;
            return this;
        }

        /**
         * Setter for host.
         * @param  host  String value for host.
         * @return Builder
         */
        public Builder host(String host) {
            this.host = host;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  Integer value for id.
         * @return Builder
         */
        public Builder id(Integer id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for isSubProcess.
         * @param  isSubProcess  IsSubProcessEnum value for isSubProcess.
         * @return Builder
         */
        public Builder isSubProcess(IsSubProcessEnum isSubProcess) {
            this.isSubProcess = isSubProcess;
            return this;
        }

        /**
         * Setter for locations.
         * @param  locations  String value for locations.
         * @return Builder
         */
        public Builder locations(String locations) {
            this.locations = locations;
            return this;
        }

        /**
         * Setter for maxTryTimes.
         * @param  maxTryTimes  Integer value for maxTryTimes.
         * @return Builder
         */
        public Builder maxTryTimes(Integer maxTryTimes) {
            this.maxTryTimes = maxTryTimes;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for nextProcessInstanceId.
         * @param  nextProcessInstanceId  Integer value for nextProcessInstanceId.
         * @return Builder
         */
        public Builder nextProcessInstanceId(Integer nextProcessInstanceId) {
            this.nextProcessInstanceId = nextProcessInstanceId;
            return this;
        }

        /**
         * Setter for processDefinition.
         * @param  processDefinition  ProcessDefinition value for processDefinition.
         * @return Builder
         */
        public Builder processDefinition(ProcessDefinition processDefinition) {
            this.processDefinition = processDefinition;
            return this;
        }

        /**
         * Setter for processDefinitionCode.
         * @param  processDefinitionCode  Long value for processDefinitionCode.
         * @return Builder
         */
        public Builder processDefinitionCode(Long processDefinitionCode) {
            this.processDefinitionCode = processDefinitionCode;
            return this;
        }

        /**
         * Setter for processDefinitionVersion.
         * @param  processDefinitionVersion  Integer value for processDefinitionVersion.
         * @return Builder
         */
        public Builder processDefinitionVersion(Integer processDefinitionVersion) {
            this.processDefinitionVersion = processDefinitionVersion;
            return this;
        }

        /**
         * Setter for processInstancePriority.
         * @param  processInstancePriority  ProcessInstancePriorityEnum value for
         *         processInstancePriority.
         * @return Builder
         */
        public Builder processInstancePriority(
                ProcessInstancePriorityEnum processInstancePriority) {
            this.processInstancePriority = processInstancePriority;
            return this;
        }

        /**
         * Setter for processInstanceStop.
         * @param  processInstanceStop  Boolean value for processInstanceStop.
         * @return Builder
         */
        public Builder processInstanceStop(Boolean processInstanceStop) {
            this.processInstanceStop = processInstanceStop;
            return this;
        }

        /**
         * Setter for queue.
         * @param  queue  String value for queue.
         * @return Builder
         */
        public Builder queue(String queue) {
            this.queue = queue;
            return this;
        }

        /**
         * Setter for recovery.
         * @param  recovery  RecoveryEnum value for recovery.
         * @return Builder
         */
        public Builder recovery(RecoveryEnum recovery) {
            this.recovery = recovery;
            return this;
        }

        /**
         * Setter for restartTime.
         * @param  restartTime  LocalDateTime value for restartTime.
         * @return Builder
         */
        public Builder restartTime(LocalDateTime restartTime) {
            this.restartTime = restartTime;
            return this;
        }

        /**
         * Setter for runTimes.
         * @param  runTimes  Integer value for runTimes.
         * @return Builder
         */
        public Builder runTimes(Integer runTimes) {
            this.runTimes = runTimes;
            return this;
        }

        /**
         * Setter for scheduleTime.
         * @param  scheduleTime  LocalDateTime value for scheduleTime.
         * @return Builder
         */
        public Builder scheduleTime(LocalDateTime scheduleTime) {
            this.scheduleTime = scheduleTime;
            return this;
        }

        /**
         * Setter for startTime.
         * @param  startTime  LocalDateTime value for startTime.
         * @return Builder
         */
        public Builder startTime(LocalDateTime startTime) {
            this.startTime = startTime;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  StateEnum value for state.
         * @return Builder
         */
        public Builder state(StateEnum state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for taskDependType.
         * @param  taskDependType  TaskDependTypeEnum value for taskDependType.
         * @return Builder
         */
        public Builder taskDependType(TaskDependTypeEnum taskDependType) {
            this.taskDependType = taskDependType;
            return this;
        }

        /**
         * Setter for tenantCode.
         * @param  tenantCode  String value for tenantCode.
         * @return Builder
         */
        public Builder tenantCode(String tenantCode) {
            this.tenantCode = tenantCode;
            return this;
        }

        /**
         * Setter for tenantId.
         * @param  tenantId  Integer value for tenantId.
         * @return Builder
         */
        public Builder tenantId(Integer tenantId) {
            this.tenantId = tenantId;
            return this;
        }

        /**
         * Setter for timeout.
         * @param  timeout  Integer value for timeout.
         * @return Builder
         */
        public Builder timeout(Integer timeout) {
            this.timeout = timeout;
            return this;
        }

        /**
         * Setter for varPool.
         * @param  varPool  String value for varPool.
         * @return Builder
         */
        public Builder varPool(String varPool) {
            this.varPool = varPool;
            return this;
        }

        /**
         * Setter for warningGroupId.
         * @param  warningGroupId  Integer value for warningGroupId.
         * @return Builder
         */
        public Builder warningGroupId(Integer warningGroupId) {
            this.warningGroupId = warningGroupId;
            return this;
        }

        /**
         * Setter for warningType.
         * @param  warningType  WarningTypeEnum value for warningType.
         * @return Builder
         */
        public Builder warningType(WarningTypeEnum warningType) {
            this.warningType = warningType;
            return this;
        }

        /**
         * Setter for workerGroup.
         * @param  workerGroup  String value for workerGroup.
         * @return Builder
         */
        public Builder workerGroup(String workerGroup) {
            this.workerGroup = workerGroup;
            return this;
        }

        /**
         * Builds a new {@link ProcessInstance} object using the set fields.
         * @return {@link ProcessInstance}
         */
        public ProcessInstance build() {
            return new ProcessInstance(blocked, cmdTypeIfComplement, commandParam, commandStartTime,
                    commandType, complementData, dagData, dependenceScheduleTimes, dryRun, duration,
                    endTime, environmentCode, executorId, executorName, failureStrategy,
                    globalParams, historyCmd, host, id, isSubProcess, locations, maxTryTimes, name,
                    nextProcessInstanceId, processDefinition, processDefinitionCode,
                    processDefinitionVersion, processInstancePriority, processInstanceStop, queue,
                    recovery, restartTime, runTimes, scheduleTime, startTime, state, taskDependType,
                    tenantCode, tenantId, timeout, varPool, warningGroupId, warningType,
                    workerGroup);
        }
    }
}
