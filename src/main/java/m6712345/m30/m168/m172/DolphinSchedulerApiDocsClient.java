/*
 * DolphinSchedulerApiDocsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package m6712345.m30.m168.m172;

import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import m6712345.m30.m168.m172.controllers.DATAQUALITYSERVICEController;
import m6712345.m30.m168.m172.controllers.DsErrorController;
import m6712345.m30.m168.m172.controllers.MController;
import m6712345.m30.m168.m172.controllers.TaskgroupController;
import m6712345.m30.m168.m172.controllers.TokenController;
import m6712345.m30.m168.m172.controllers.UIController;
import m6712345.m30.m168.m172.controllers.WorkerController;
import m6712345.m30.m168.m172.http.client.HttpClient;
import m6712345.m30.m168.m172.http.client.HttpClientConfiguration;
import m6712345.m30.m168.m172.http.client.OkClient;
import m6712345.m30.m168.m172.http.client.ReadonlyHttpClientConfiguration;

/**
 * Gateway class for the library.
 * This class acts as a factory for Controllers.
 * It holds the state of the SDK.
 */
public final class DolphinSchedulerApiDocsClient implements Configuration {

    /**
     * Private store for controllers.
     */
    private TokenController token;
    private MController m;
    private MController m;
    private MController m;
    private MController m;
    private DATAQUALITYSERVICEController dATAQUALITYSERVICE;
    private MController m;
    private MController m;
    private MController m;
    private MController m;
    private MController m;
    private MController m;
    private MController m;
    private MController m;
    private MController m;
    private MController m;
    private MController m;
    private MController m;
    private MController m;
    private MController m;
    private MController m;
    private MController m;
    private UIController uI;
    private MController m;
    private WorkerController worker;
    private MController m;
    private DsErrorController dsErrorController;
    private TaskgroupController taskgroup;

    /**
     * Current API environment.
     */
    private final Environment environment;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * Map of authentication Managers.
     */
    private Map<String, AuthManager> authManagers;

    private DolphinSchedulerApiDocsClient(Environment environment, HttpClient httpClient,
            ReadonlyHttpClientConfiguration httpClientConfig,
            Map<String, AuthManager> authManagers) {
        this.environment = environment;
        this.httpClient = httpClient;
        this.httpClientConfig = httpClientConfig;

        this.authManagers = (authManagers == null) ? new HashMap<>() : new HashMap<>(authManagers);


        token = new TokenController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        dATAQUALITYSERVICE = new DATAQUALITYSERVICEController(this, this.httpClient,
                this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        uI = new UIController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        worker = new WorkerController(this, this.httpClient, this.authManagers);
        m = new MController(this, this.httpClient, this.authManagers);
        dsErrorController = new DsErrorController(this, this.httpClient, this.authManagers);
        taskgroup = new TaskgroupController(this, this.httpClient, this.authManagers);
    }

    /**
     * Shutdown the underlying HttpClient instance.
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    /**
     * Get the instance of TokenController.
     * @return token
     */
    public TokenController getTokenController() {
        return token;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of DATAQUALITYSERVICEController.
     * @return dATAQUALITYSERVICE
     */
    public DATAQUALITYSERVICEController getDATAQUALITYSERVICEController() {
        return dATAQUALITYSERVICE;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of UIController.
     * @return uI
     */
    public UIController getUIController() {
        return uI;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of WorkerController.
     * @return worker
     */
    public WorkerController getWorkerController() {
        return worker;
    }

    /**
     * Get the instance of MController.
     * @return m
     */
    public MController getMController() {
        return m;
    }

    /**
     * Get the instance of DsErrorController.
     * @return dsErrorController
     */
    public DsErrorController getDsErrorController() {
        return dsErrorController;
    }

    /**
     * Get the instance of TaskgroupController.
     * @return taskgroup
     */
    public TaskgroupController getTaskgroupController() {
        return taskgroup;
    }

    /**
     * Current API environment.
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    private HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    /**
     * The timeout to use for making HTTP requests.
     * @deprecated This method will be removed in a future version. Use
     *             {@link #getHttpClientConfig()} instead.
     *
     * @return timeout
     */
    @Deprecated
    public long timeout() {
        return httpClientConfig.getTimeout();
    }

    /**
     * Get base URI by current environment.
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        return environmentMapper(environment, server);
    }

    /**
     * Get base URI by current environment.
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.ENUM_DEFAULT);
    }

    /**
     * Base URLs by environment and server aliases.
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.PRODUCTION)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "http://172.168.30.67:12345/dolphinscheduler";
            }
        }
        return "http://172.168.30.67:12345/dolphinscheduler";
    }

    /**
     * Converts this DolphinSchedulerApiDocsClient into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "DolphinSchedulerApiDocsClient [" + "environment=" + environment
                + ", httpClientConfig=" + httpClientConfig + ", authManagers=" + authManagers + "]";
    }

    /**
     * Builds a new {@link DolphinSchedulerApiDocsClient.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link DolphinSchedulerApiDocsClient.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.httpClient = getHttpClient();
        builder.authManagers = authManagers;
        builder.httpClientConfig(configBldr -> configBldr =
                ((HttpClientConfiguration) httpClientConfig).newBuilder());
        return builder;
    }

    /**
     * Class to build instances of {@link DolphinSchedulerApiDocsClient}.
     */
    public static class Builder {

        private Environment environment = Environment.PRODUCTION;
        private HttpClient httpClient;
        private Map<String, AuthManager> authManagers = null;
        private HttpClientConfiguration.Builder httpClientConfigBuilder =
                new HttpClientConfiguration.Builder();


        /**
         * Current API environment.
         * @param environment The environment for client.
         * @return Builder
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }

        /**
         * The timeout to use for making HTTP requests.
         * @deprecated This method will be removed in a future version. Use
         *             {@link #httpClientConfig(Consumer) httpClientConfig} instead.
         * @param timeout must be greater then 0.
         * @return Builder
         */
        @Deprecated
        public Builder timeout(long timeout) {
            this.httpClientConfigBuilder.timeout(timeout);
            return this;
        }

        /**
         * Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param action Consumer for the builder of httpClientConfiguration.
         * @return Builder
         */
        public Builder httpClientConfig(Consumer<HttpClientConfiguration.Builder> action) {
            action.accept(httpClientConfigBuilder);
            return this;
        }

        /**
         * Builds a new DolphinSchedulerApiDocsClient object using the set fields.
         * @return DolphinSchedulerApiDocsClient
         */
        public DolphinSchedulerApiDocsClient build() {
            HttpClientConfiguration httpClientConfig = httpClientConfigBuilder.build();
            httpClient = new OkClient(httpClientConfig);

            return new DolphinSchedulerApiDocsClient(environment, httpClient, httpClientConfig,
                    authManagers);
        }
    }
}