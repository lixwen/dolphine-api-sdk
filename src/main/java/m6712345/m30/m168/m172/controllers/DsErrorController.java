/*
 * DolphinSchedulerApiDocsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package m6712345.m30.m168.m172.controllers;

import java.io.IOException;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import m6712345.m30.m168.m172.ApiHelper;
import m6712345.m30.m168.m172.AuthManager;
import m6712345.m30.m168.m172.Configuration;
import m6712345.m30.m168.m172.exceptions.ApiException;
import m6712345.m30.m168.m172.http.Headers;
import m6712345.m30.m168.m172.http.client.HttpClient;
import m6712345.m30.m168.m172.http.client.HttpContext;
import m6712345.m30.m168.m172.http.request.HttpRequest;
import m6712345.m30.m168.m172.http.response.HttpResponse;
import m6712345.m30.m168.m172.http.response.HttpStringResponse;
import m6712345.m30.m168.m172.models.ModelAndView;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DsErrorController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public DsErrorController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * handleError.
     * @return    Returns the ModelAndView response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ModelAndView handleErrorUsingGET() throws ApiException, IOException {
        HttpRequest request = buildHandleErrorUsingGETRequest();
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleHandleErrorUsingGETResponse(context);
    }

    /**
     * handleError.
     * @return    Returns the ModelAndView response from the API call
     */
    public CompletableFuture<ModelAndView> handleErrorUsingGETAsync() {
        return makeHttpCallAsync(() -> buildHandleErrorUsingGETRequest(),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleHandleErrorUsingGETResponse(context));
    }

    /**
     * Builds the HttpRequest object for handleErrorUsingGET.
     */
    private HttpRequest buildHandleErrorUsingGETRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/error");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for handleErrorUsingGET.
     * @return An object of type ModelAndView
     */
    private ModelAndView handleHandleErrorUsingGETResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ModelAndView result = ApiHelper.deserialize(responseBody,
                ModelAndView.class);

        return result;
    }

    /**
     * handleError.
     * @return    Returns the ModelAndView response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ModelAndView handleErrorUsingPOST() throws ApiException, IOException {
        HttpRequest request = buildHandleErrorUsingPOSTRequest();
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleHandleErrorUsingPOSTResponse(context);
    }

    /**
     * handleError.
     * @return    Returns the ModelAndView response from the API call
     */
    public CompletableFuture<ModelAndView> handleErrorUsingPOSTAsync() {
        return makeHttpCallAsync(() -> buildHandleErrorUsingPOSTRequest(),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleHandleErrorUsingPOSTResponse(context));
    }

    /**
     * Builds the HttpRequest object for handleErrorUsingPOST.
     */
    private HttpRequest buildHandleErrorUsingPOSTRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/error");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for handleErrorUsingPOST.
     * @return An object of type ModelAndView
     */
    private ModelAndView handleHandleErrorUsingPOSTResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ModelAndView result = ApiHelper.deserialize(responseBody,
                ModelAndView.class);

        return result;
    }

    /**
     * handleError.
     * @return    Returns the ModelAndView response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ModelAndView handleErrorUsingPUT() throws ApiException, IOException {
        HttpRequest request = buildHandleErrorUsingPUTRequest();
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleHandleErrorUsingPUTResponse(context);
    }

    /**
     * handleError.
     * @return    Returns the ModelAndView response from the API call
     */
    public CompletableFuture<ModelAndView> handleErrorUsingPUTAsync() {
        return makeHttpCallAsync(() -> buildHandleErrorUsingPUTRequest(),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleHandleErrorUsingPUTResponse(context));
    }

    /**
     * Builds the HttpRequest object for handleErrorUsingPUT.
     */
    private HttpRequest buildHandleErrorUsingPUTRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/error");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().put(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for handleErrorUsingPUT.
     * @return An object of type ModelAndView
     */
    private ModelAndView handleHandleErrorUsingPUTResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ModelAndView result = ApiHelper.deserialize(responseBody,
                ModelAndView.class);

        return result;
    }

    /**
     * handleError.
     * @return    Returns the ModelAndView response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ModelAndView handleErrorUsingDELETE() throws ApiException, IOException {
        HttpRequest request = buildHandleErrorUsingDELETERequest();
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleHandleErrorUsingDELETEResponse(context);
    }

    /**
     * handleError.
     * @return    Returns the ModelAndView response from the API call
     */
    public CompletableFuture<ModelAndView> handleErrorUsingDELETEAsync() {
        return makeHttpCallAsync(() -> buildHandleErrorUsingDELETERequest(),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleHandleErrorUsingDELETEResponse(context));
    }

    /**
     * Builds the HttpRequest object for handleErrorUsingDELETE.
     */
    private HttpRequest buildHandleErrorUsingDELETERequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/error");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for handleErrorUsingDELETE.
     * @return An object of type ModelAndView
     */
    private ModelAndView handleHandleErrorUsingDELETEResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ModelAndView result = ApiHelper.deserialize(responseBody,
                ModelAndView.class);

        return result;
    }

    /**
     * handleError.
     * @return    Returns the ModelAndView response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ModelAndView handleErrorUsingPATCH() throws ApiException, IOException {
        HttpRequest request = buildHandleErrorUsingPATCHRequest();
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleHandleErrorUsingPATCHResponse(context);
    }

    /**
     * handleError.
     * @return    Returns the ModelAndView response from the API call
     */
    public CompletableFuture<ModelAndView> handleErrorUsingPATCHAsync() {
        return makeHttpCallAsync(() -> buildHandleErrorUsingPATCHRequest(),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleHandleErrorUsingPATCHResponse(context));
    }

    /**
     * Builds the HttpRequest object for handleErrorUsingPATCH.
     */
    private HttpRequest buildHandleErrorUsingPATCHRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/error");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().patch(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for handleErrorUsingPATCH.
     * @return An object of type ModelAndView
     */
    private ModelAndView handleHandleErrorUsingPATCHResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        ModelAndView result = ApiHelper.deserialize(responseBody,
                ModelAndView.class);

        return result;
    }

}