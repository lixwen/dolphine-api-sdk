/*
 * DolphinSchedulerApiDocsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package m6712345.m30.m168.m172.controllers;

import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import m6712345.m30.m168.m172.ApiHelper;
import m6712345.m30.m168.m172.AuthManager;
import m6712345.m30.m168.m172.Configuration;
import m6712345.m30.m168.m172.exceptions.ApiException;
import m6712345.m30.m168.m172.http.Headers;
import m6712345.m30.m168.m172.http.client.HttpClient;
import m6712345.m30.m168.m172.http.client.HttpContext;
import m6712345.m30.m168.m172.http.request.HttpRequest;
import m6712345.m30.m168.m172.http.response.HttpResponse;
import m6712345.m30.m168.m172.http.response.HttpStringResponse;
import m6712345.m30.m168.m172.models.Result;

/**
 * This class lists all the endpoints of the groups.
 */
public final class TokenController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public TokenController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * 分页查询access token列表.
     * @param  pageNo  Required parameter: 页码号
     * @param  pageSize  Required parameter: 页大小
     * @param  searchVal  Optional parameter: 搜索值
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result queryAccessTokenListUsingGET(
            final int pageNo,
            final int pageSize,
            final String searchVal) throws ApiException, IOException {
        HttpRequest request = buildQueryAccessTokenListUsingGETRequest(pageNo, pageSize, searchVal);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleQueryAccessTokenListUsingGETResponse(context);
    }

    /**
     * 分页查询access token列表.
     * @param  pageNo  Required parameter: 页码号
     * @param  pageSize  Required parameter: 页大小
     * @param  searchVal  Optional parameter: 搜索值
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> queryAccessTokenListUsingGETAsync(
            final int pageNo,
            final int pageSize,
            final String searchVal) {
        return makeHttpCallAsync(() -> buildQueryAccessTokenListUsingGETRequest(pageNo, pageSize,
                searchVal),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleQueryAccessTokenListUsingGETResponse(context));
    }

    /**
     * Builds the HttpRequest object for queryAccessTokenListUsingGET.
     */
    private HttpRequest buildQueryAccessTokenListUsingGETRequest(
            final int pageNo,
            final int pageSize,
            final String searchVal) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/access-tokens");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("pageNo", pageNo);
        queryParameters.put("pageSize", pageSize);
        queryParameters.put("searchVal", searchVal);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for queryAccessTokenListUsingGET.
     * @return An object of type Result
     */
    private Result handleQueryAccessTokenListUsingGETResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * 为指定用户创建安全令牌.
     * @param  expireTime  Required parameter: 安全令牌的过期时间
     * @param  userId  Required parameter: 用户ID
     * @param  token  Optional parameter: 安全令牌字符串，若未显式指定将会自动生成
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result createTokenUsingPOST(
            final String expireTime,
            final int userId,
            final String token) throws ApiException, IOException {
        HttpRequest request = buildCreateTokenUsingPOSTRequest(expireTime, userId, token);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateTokenUsingPOSTResponse(context);
    }

    /**
     * 为指定用户创建安全令牌.
     * @param  expireTime  Required parameter: 安全令牌的过期时间
     * @param  userId  Required parameter: 用户ID
     * @param  token  Optional parameter: 安全令牌字符串，若未显式指定将会自动生成
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> createTokenUsingPOSTAsync(
            final String expireTime,
            final int userId,
            final String token) {
        return makeHttpCallAsync(() -> buildCreateTokenUsingPOSTRequest(expireTime, userId, token),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleCreateTokenUsingPOSTResponse(context));
    }

    /**
     * Builds the HttpRequest object for createTokenUsingPOST.
     */
    private HttpRequest buildCreateTokenUsingPOSTRequest(
            final String expireTime,
            final int userId,
            final String token) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/access-tokens");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("expireTime", expireTime);
        queryParameters.put("userId", userId);
        queryParameters.put("token", token);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for createTokenUsingPOST.
     * @return An object of type Result
     */
    private Result handleCreateTokenUsingPOSTResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * 查询指定用户的access token.
     * @param  userId  Required parameter: 用户ID
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result queryAccessTokenByUserUsingGET(
            final int userId) throws ApiException, IOException {
        HttpRequest request = buildQueryAccessTokenByUserUsingGETRequest(userId);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleQueryAccessTokenByUserUsingGETResponse(context);
    }

    /**
     * 查询指定用户的access token.
     * @param  userId  Required parameter: 用户ID
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> queryAccessTokenByUserUsingGETAsync(
            final int userId) {
        return makeHttpCallAsync(() -> buildQueryAccessTokenByUserUsingGETRequest(userId),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleQueryAccessTokenByUserUsingGETResponse(context));
    }

    /**
     * Builds the HttpRequest object for queryAccessTokenByUserUsingGET.
     */
    private HttpRequest buildQueryAccessTokenByUserUsingGETRequest(
            final int userId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/access-tokens/user/{userId}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("userId",
                new SimpleEntry<Object, Boolean>(userId, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for queryAccessTokenByUserUsingGET.
     * @return An object of type Result
     */
    private Result handleQueryAccessTokenByUserUsingGETResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * 更新指定用户的安全令牌.
     * @param  expireTime  Required parameter: 安全令牌的过期时间
     * @param  id  Required parameter: 安全令牌的ID
     * @param  userId  Required parameter: 用户ID
     * @param  token  Optional parameter: 安全令牌字符串，若未显式指定将会自动生成
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result updateTokenUsingPUT(
            final String expireTime,
            final int id,
            final int userId,
            final String token) throws ApiException, IOException {
        HttpRequest request = buildUpdateTokenUsingPUTRequest(expireTime, id, userId, token);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdateTokenUsingPUTResponse(context);
    }

    /**
     * 更新指定用户的安全令牌.
     * @param  expireTime  Required parameter: 安全令牌的过期时间
     * @param  id  Required parameter: 安全令牌的ID
     * @param  userId  Required parameter: 用户ID
     * @param  token  Optional parameter: 安全令牌字符串，若未显式指定将会自动生成
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> updateTokenUsingPUTAsync(
            final String expireTime,
            final int id,
            final int userId,
            final String token) {
        return makeHttpCallAsync(() -> buildUpdateTokenUsingPUTRequest(expireTime, id, userId,
                token),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleUpdateTokenUsingPUTResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateTokenUsingPUT.
     */
    private HttpRequest buildUpdateTokenUsingPUTRequest(
            final String expireTime,
            final int id,
            final int userId,
            final String token) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/access-tokens/{id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("id",
                new SimpleEntry<Object, Boolean>(id, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("expireTime", expireTime);
        queryParameters.put("userId", userId);
        queryParameters.put("token", token);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().put(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for updateTokenUsingPUT.
     * @return An object of type Result
     */
    private Result handleUpdateTokenUsingPUTResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

}