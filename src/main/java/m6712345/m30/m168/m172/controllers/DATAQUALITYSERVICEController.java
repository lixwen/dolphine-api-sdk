/*
 * DolphinSchedulerApiDocsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package m6712345.m30.m168.m172.controllers;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import m6712345.m30.m168.m172.ApiHelper;
import m6712345.m30.m168.m172.AuthManager;
import m6712345.m30.m168.m172.Configuration;
import m6712345.m30.m168.m172.exceptions.ApiException;
import m6712345.m30.m168.m172.http.Headers;
import m6712345.m30.m168.m172.http.client.HttpClient;
import m6712345.m30.m168.m172.http.client.HttpContext;
import m6712345.m30.m168.m172.http.request.HttpRequest;
import m6712345.m30.m168.m172.http.response.HttpResponse;
import m6712345.m30.m168.m172.http.response.HttpStringResponse;
import m6712345.m30.m168.m172.models.Result;

/**
 * This class lists all the endpoints of the groups.
 */
public final class DATAQUALITYSERVICEController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public DATAQUALITYSERVICEController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * 获取数据源OPTIONS.
     * @param  datasourceId  Optional parameter: 数据源ID
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result getDatasourceOptionsByIdUsingGET(
            final Integer datasourceId) throws ApiException, IOException {
        HttpRequest request = buildGetDatasourceOptionsByIdUsingGETRequest(datasourceId);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetDatasourceOptionsByIdUsingGETResponse(context);
    }

    /**
     * 获取数据源OPTIONS.
     * @param  datasourceId  Optional parameter: 数据源ID
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> getDatasourceOptionsByIdUsingGETAsync(
            final Integer datasourceId) {
        return makeHttpCallAsync(() -> buildGetDatasourceOptionsByIdUsingGETRequest(datasourceId),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetDatasourceOptionsByIdUsingGETResponse(context));
    }

    /**
     * Builds the HttpRequest object for getDatasourceOptionsByIdUsingGET.
     */
    private HttpRequest buildGetDatasourceOptionsByIdUsingGETRequest(
            final Integer datasourceId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/data-quality/getDatasourceOptionsById");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("datasourceId", datasourceId);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getDatasourceOptionsByIdUsingGET.
     * @return An object of type Result
     */
    private Result handleGetDatasourceOptionsByIdUsingGETResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * 获取规则form-create json.
     * @param  ruleId  Optional parameter: 规则ID
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result getRuleFormCreateJsonByIdUsingGET(
            final Integer ruleId) throws ApiException, IOException {
        HttpRequest request = buildGetRuleFormCreateJsonByIdUsingGETRequest(ruleId);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleGetRuleFormCreateJsonByIdUsingGETResponse(context);
    }

    /**
     * 获取规则form-create json.
     * @param  ruleId  Optional parameter: 规则ID
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> getRuleFormCreateJsonByIdUsingGETAsync(
            final Integer ruleId) {
        return makeHttpCallAsync(() -> buildGetRuleFormCreateJsonByIdUsingGETRequest(ruleId),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleGetRuleFormCreateJsonByIdUsingGETResponse(context));
    }

    /**
     * Builds the HttpRequest object for getRuleFormCreateJsonByIdUsingGET.
     */
    private HttpRequest buildGetRuleFormCreateJsonByIdUsingGETRequest(
            final Integer ruleId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/data-quality/getRuleFormCreateJson");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("ruleId", ruleId);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for getRuleFormCreateJsonByIdUsingGET.
     * @return An object of type Result
     */
    private Result handleGetRuleFormCreateJsonByIdUsingGETResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * 查询数据质量任务结果分页列表.
     * @param  endDate  Optional parameter: 结束时间
     * @param  pageNo  Optional parameter: 页码号
     * @param  pageSize  Optional parameter: 页大小
     * @param  ruleType  Optional parameter: 规则类型
     * @param  searchVal  Optional parameter: 搜索值
     * @param  startDate  Optional parameter: 开始时间
     * @param  state  Optional parameter: 状态
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result queryExecuteResultListPagingUsingGET(
            final String endDate,
            final Integer pageNo,
            final Integer pageSize,
            final Integer ruleType,
            final String searchVal,
            final String startDate,
            final Integer state) throws ApiException, IOException {
        HttpRequest request = buildQueryExecuteResultListPagingUsingGETRequest(endDate, pageNo,
                pageSize, ruleType, searchVal, startDate, state);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleQueryExecuteResultListPagingUsingGETResponse(context);
    }

    /**
     * 查询数据质量任务结果分页列表.
     * @param  endDate  Optional parameter: 结束时间
     * @param  pageNo  Optional parameter: 页码号
     * @param  pageSize  Optional parameter: 页大小
     * @param  ruleType  Optional parameter: 规则类型
     * @param  searchVal  Optional parameter: 搜索值
     * @param  startDate  Optional parameter: 开始时间
     * @param  state  Optional parameter: 状态
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> queryExecuteResultListPagingUsingGETAsync(
            final String endDate,
            final Integer pageNo,
            final Integer pageSize,
            final Integer ruleType,
            final String searchVal,
            final String startDate,
            final Integer state) {
        return makeHttpCallAsync(() -> buildQueryExecuteResultListPagingUsingGETRequest(endDate,
                pageNo, pageSize, ruleType, searchVal, startDate, state),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleQueryExecuteResultListPagingUsingGETResponse(context));
    }

    /**
     * Builds the HttpRequest object for queryExecuteResultListPagingUsingGET.
     */
    private HttpRequest buildQueryExecuteResultListPagingUsingGETRequest(
            final String endDate,
            final Integer pageNo,
            final Integer pageSize,
            final Integer ruleType,
            final String searchVal,
            final String startDate,
            final Integer state) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/data-quality/result/page");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("endDate", endDate);
        queryParameters.put("pageNo", pageNo);
        queryParameters.put("pageSize", pageSize);
        queryParameters.put("ruleType", ruleType);
        queryParameters.put("searchVal", searchVal);
        queryParameters.put("startDate", startDate);
        queryParameters.put("state", state);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for queryExecuteResultListPagingUsingGET.
     * @return An object of type Result
     */
    private Result handleQueryExecuteResultListPagingUsingGETResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * 查询规则分页列表.
     * @param  endDate  Optional parameter: 结束时间
     * @param  pageNo  Optional parameter: 页码号
     * @param  pageSize  Optional parameter: 页大小
     * @param  ruleType  Optional parameter: 规则类型
     * @param  searchVal  Optional parameter: 搜索值
     * @param  startDate  Optional parameter: 开始时间
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result queryRuleListPagingUsingGET(
            final String endDate,
            final Integer pageNo,
            final Integer pageSize,
            final Integer ruleType,
            final String searchVal,
            final String startDate) throws ApiException, IOException {
        HttpRequest request = buildQueryRuleListPagingUsingGETRequest(endDate, pageNo, pageSize,
                ruleType, searchVal, startDate);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleQueryRuleListPagingUsingGETResponse(context);
    }

    /**
     * 查询规则分页列表.
     * @param  endDate  Optional parameter: 结束时间
     * @param  pageNo  Optional parameter: 页码号
     * @param  pageSize  Optional parameter: 页大小
     * @param  ruleType  Optional parameter: 规则类型
     * @param  searchVal  Optional parameter: 搜索值
     * @param  startDate  Optional parameter: 开始时间
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> queryRuleListPagingUsingGETAsync(
            final String endDate,
            final Integer pageNo,
            final Integer pageSize,
            final Integer ruleType,
            final String searchVal,
            final String startDate) {
        return makeHttpCallAsync(() -> buildQueryRuleListPagingUsingGETRequest(endDate, pageNo,
                pageSize, ruleType, searchVal, startDate),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleQueryRuleListPagingUsingGETResponse(context));
    }

    /**
     * Builds the HttpRequest object for queryRuleListPagingUsingGET.
     */
    private HttpRequest buildQueryRuleListPagingUsingGETRequest(
            final String endDate,
            final Integer pageNo,
            final Integer pageSize,
            final Integer ruleType,
            final String searchVal,
            final String startDate) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/data-quality/rule/page");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("endDate", endDate);
        queryParameters.put("pageNo", pageNo);
        queryParameters.put("pageSize", pageSize);
        queryParameters.put("ruleType", ruleType);
        queryParameters.put("searchVal", searchVal);
        queryParameters.put("startDate", startDate);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for queryRuleListPagingUsingGET.
     * @return An object of type Result
     */
    private Result handleQueryRuleListPagingUsingGETResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * 查询规则列表.
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result queryRuleListUsingGET() throws ApiException, IOException {
        HttpRequest request = buildQueryRuleListUsingGETRequest();
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleQueryRuleListUsingGETResponse(context);
    }

    /**
     * 查询规则列表.
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> queryRuleListUsingGETAsync() {
        return makeHttpCallAsync(() -> buildQueryRuleListUsingGETRequest(),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleQueryRuleListUsingGETResponse(context));
    }

    /**
     * Builds the HttpRequest object for queryRuleListUsingGET.
     */
    private HttpRequest buildQueryRuleListUsingGETRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/data-quality/ruleList");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for queryRuleListUsingGET.
     * @return An object of type Result
     */
    private Result handleQueryRuleListUsingGETResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

}