/*
 * DolphinSchedulerApiDocsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package m6712345.m30.m168.m172.controllers;

import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import m6712345.m30.m168.m172.ApiHelper;
import m6712345.m30.m168.m172.AuthManager;
import m6712345.m30.m168.m172.Configuration;
import m6712345.m30.m168.m172.exceptions.ApiException;
import m6712345.m30.m168.m172.http.Headers;
import m6712345.m30.m168.m172.http.client.HttpClient;
import m6712345.m30.m168.m172.http.client.HttpContext;
import m6712345.m30.m168.m172.http.request.HttpRequest;
import m6712345.m30.m168.m172.http.response.HttpResponse;
import m6712345.m30.m168.m172.http.response.HttpStringResponse;

/**
 * This class lists all the endpoints of the groups.
 */
public final class UIController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public UIController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * 通过类型查询UI插件.
     * @param  pluginType  Required parameter: pluginType
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void queryUiPluginsByTypeUsingGET(
            final Object pluginType) throws ApiException, IOException {
        HttpRequest request = buildQueryUiPluginsByTypeUsingGETRequest(pluginType);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleQueryUiPluginsByTypeUsingGETResponse(context);
    }

    /**
     * 通过类型查询UI插件.
     * @param  pluginType  Required parameter: pluginType
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> queryUiPluginsByTypeUsingGETAsync(
            final Object pluginType) {
        return makeHttpCallAsync(() -> buildQueryUiPluginsByTypeUsingGETRequest(pluginType),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleQueryUiPluginsByTypeUsingGETResponse(context));
    }

    /**
     * Builds the HttpRequest object for queryUiPluginsByTypeUsingGET.
     */
    private HttpRequest buildQueryUiPluginsByTypeUsingGETRequest(
            final Object pluginType) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/ui-plugins/query-by-type");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("pluginType", pluginType);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for queryUiPluginsByTypeUsingGET.
     * @return An object of type void
     */
    private Void handleQueryUiPluginsByTypeUsingGETResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

    /**
     * 通过ID查询UI插件详情.
     * @param  id  Required parameter: 插件ID
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void queryUiPluginDetailByIdUsingGET(
            final int id) throws ApiException, IOException {
        HttpRequest request = buildQueryUiPluginDetailByIdUsingGETRequest(id);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        handleQueryUiPluginDetailByIdUsingGETResponse(context);
    }

    /**
     * 通过ID查询UI插件详情.
     * @param  id  Required parameter: 插件ID
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> queryUiPluginDetailByIdUsingGETAsync(
            final int id) {
        return makeHttpCallAsync(() -> buildQueryUiPluginDetailByIdUsingGETRequest(id),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleQueryUiPluginDetailByIdUsingGETResponse(context));
    }

    /**
     * Builds the HttpRequest object for queryUiPluginDetailByIdUsingGET.
     */
    private HttpRequest buildQueryUiPluginDetailByIdUsingGETRequest(
            final int id) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/ui-plugins/{id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("id",
                new SimpleEntry<Object, Boolean>(id, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for queryUiPluginDetailByIdUsingGET.
     * @return An object of type void
     */
    private Void handleQueryUiPluginDetailByIdUsingGETResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        return null;
    }

}