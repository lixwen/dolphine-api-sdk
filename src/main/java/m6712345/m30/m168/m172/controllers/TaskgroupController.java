/*
 * DolphinSchedulerApiDocsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package m6712345.m30.m168.m172.controllers;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import m6712345.m30.m168.m172.ApiHelper;
import m6712345.m30.m168.m172.AuthManager;
import m6712345.m30.m168.m172.Configuration;
import m6712345.m30.m168.m172.exceptions.ApiException;
import m6712345.m30.m168.m172.http.Headers;
import m6712345.m30.m168.m172.http.client.HttpClient;
import m6712345.m30.m168.m172.http.client.HttpContext;
import m6712345.m30.m168.m172.http.request.HttpRequest;
import m6712345.m30.m168.m172.http.response.HttpResponse;
import m6712345.m30.m168.m172.http.response.HttpStringResponse;
import m6712345.m30.m168.m172.models.Result;

/**
 * This class lists all the endpoints of the groups.
 */
public final class TaskgroupController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public TaskgroupController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * CLOSE_TASK_GROUP_NOTES.
     * @param  id  Required parameter: ID
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result closeTaskGroupUsingPOST(
            final int id) throws ApiException, IOException {
        HttpRequest request = buildCloseTaskGroupUsingPOSTRequest(id);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCloseTaskGroupUsingPOSTResponse(context);
    }

    /**
     * CLOSE_TASK_GROUP_NOTES.
     * @param  id  Required parameter: ID
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> closeTaskGroupUsingPOSTAsync(
            final int id) {
        return makeHttpCallAsync(() -> buildCloseTaskGroupUsingPOSTRequest(id),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleCloseTaskGroupUsingPOSTResponse(context));
    }

    /**
     * Builds the HttpRequest object for closeTaskGroupUsingPOST.
     */
    private HttpRequest buildCloseTaskGroupUsingPOSTRequest(
            final int id) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/task-group/close-task-group");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("id", id);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for closeTaskGroupUsingPOST.
     * @return An object of type Result
     */
    private Result handleCloseTaskGroupUsingPOSTResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * CREATE_TASK_GROUP_NOTE.
     * @param  description  Optional parameter: DESCRIPTION
     * @param  groupSize  Optional parameter: GROUPSIZE
     * @param  name  Optional parameter: NAME
     * @param  projectCode  Optional parameter: 项目Code
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result createTaskGroupUsingPOST(
            final String description,
            final Integer groupSize,
            final String name,
            final String projectCode) throws ApiException, IOException {
        HttpRequest request = buildCreateTaskGroupUsingPOSTRequest(description, groupSize, name,
                projectCode);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleCreateTaskGroupUsingPOSTResponse(context);
    }

    /**
     * CREATE_TASK_GROUP_NOTE.
     * @param  description  Optional parameter: DESCRIPTION
     * @param  groupSize  Optional parameter: GROUPSIZE
     * @param  name  Optional parameter: NAME
     * @param  projectCode  Optional parameter: 项目Code
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> createTaskGroupUsingPOSTAsync(
            final String description,
            final Integer groupSize,
            final String name,
            final String projectCode) {
        return makeHttpCallAsync(() -> buildCreateTaskGroupUsingPOSTRequest(description, groupSize,
                name, projectCode),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleCreateTaskGroupUsingPOSTResponse(context));
    }

    /**
     * Builds the HttpRequest object for createTaskGroupUsingPOST.
     */
    private HttpRequest buildCreateTaskGroupUsingPOSTRequest(
            final String description,
            final Integer groupSize,
            final String name,
            final String projectCode) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/task-group/create");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("description", description);
        queryParameters.put("groupSize", groupSize);
        queryParameters.put("name", name);
        queryParameters.put("projectCode", projectCode);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for createTaskGroupUsingPOST.
     * @return An object of type Result
     */
    private Result handleCreateTaskGroupUsingPOSTResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * WAKE_TASK_COMPULSIVELY_NOTES.
     * @param  queueId  Required parameter: 任务组队列id
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result forceStartUsingPOST(
            final int queueId) throws ApiException, IOException {
        HttpRequest request = buildForceStartUsingPOSTRequest(queueId);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleForceStartUsingPOSTResponse(context);
    }

    /**
     * WAKE_TASK_COMPULSIVELY_NOTES.
     * @param  queueId  Required parameter: 任务组队列id
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> forceStartUsingPOSTAsync(
            final int queueId) {
        return makeHttpCallAsync(() -> buildForceStartUsingPOSTRequest(queueId),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleForceStartUsingPOSTResponse(context));
    }

    /**
     * Builds the HttpRequest object for forceStartUsingPOST.
     */
    private HttpRequest buildForceStartUsingPOSTRequest(
            final int queueId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/task-group/forceStart");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("queueId", queueId);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for forceStartUsingPOST.
     * @return An object of type Result
     */
    private Result handleForceStartUsingPOSTResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * QUERY_ALL_TASK_GROUP_NOTES.
     * @param  pageNo  Required parameter: 页码号
     * @param  pageSize  Required parameter: 页大小
     * @param  name  Optional parameter: NAME
     * @param  status  Optional parameter: status
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result queryAllTaskGroupUsingGET(
            final int pageNo,
            final int pageSize,
            final String name,
            final Integer status) throws ApiException, IOException {
        HttpRequest request = buildQueryAllTaskGroupUsingGETRequest(pageNo, pageSize, name, status);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleQueryAllTaskGroupUsingGETResponse(context);
    }

    /**
     * QUERY_ALL_TASK_GROUP_NOTES.
     * @param  pageNo  Required parameter: 页码号
     * @param  pageSize  Required parameter: 页大小
     * @param  name  Optional parameter: NAME
     * @param  status  Optional parameter: status
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> queryAllTaskGroupUsingGETAsync(
            final int pageNo,
            final int pageSize,
            final String name,
            final Integer status) {
        return makeHttpCallAsync(() -> buildQueryAllTaskGroupUsingGETRequest(pageNo, pageSize, name,
                status),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleQueryAllTaskGroupUsingGETResponse(context));
    }

    /**
     * Builds the HttpRequest object for queryAllTaskGroupUsingGET.
     */
    private HttpRequest buildQueryAllTaskGroupUsingGETRequest(
            final int pageNo,
            final int pageSize,
            final String name,
            final Integer status) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/task-group/list-paging");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("pageNo", pageNo);
        queryParameters.put("pageSize", pageSize);
        queryParameters.put("name", name);
        queryParameters.put("status", status);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for queryAllTaskGroupUsingGET.
     * @return An object of type Result
     */
    private Result handleQueryAllTaskGroupUsingGETResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * WAKE_TASK_COMPULSIVELY_NOTES.
     * @param  priority  Required parameter: 任务队列优先级
     * @param  queueId  Required parameter: 任务组队列id
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result modifyPriorityUsingPOST(
            final int priority,
            final int queueId) throws ApiException, IOException {
        HttpRequest request = buildModifyPriorityUsingPOSTRequest(priority, queueId);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleModifyPriorityUsingPOSTResponse(context);
    }

    /**
     * WAKE_TASK_COMPULSIVELY_NOTES.
     * @param  priority  Required parameter: 任务队列优先级
     * @param  queueId  Required parameter: 任务组队列id
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> modifyPriorityUsingPOSTAsync(
            final int priority,
            final int queueId) {
        return makeHttpCallAsync(() -> buildModifyPriorityUsingPOSTRequest(priority, queueId),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleModifyPriorityUsingPOSTResponse(context));
    }

    /**
     * Builds the HttpRequest object for modifyPriorityUsingPOST.
     */
    private HttpRequest buildModifyPriorityUsingPOSTRequest(
            final int priority,
            final int queueId) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/task-group/modifyPriority");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("priority", priority);
        queryParameters.put("queueId", queueId);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for modifyPriorityUsingPOST.
     * @return An object of type Result
     */
    private Result handleModifyPriorityUsingPOSTResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * QUERY_ALL_TASKS_NOTES.
     * @param  pageNo  Required parameter: 页码号
     * @param  pageSize  Required parameter: 页大小
     * @param  groupId  Optional parameter: GROUP_ID
     * @param  processInstanceName  Optional parameter: 流程实例名称
     * @param  status  Optional parameter: STATUS
     * @param  taskInstanceName  Optional parameter: TASK_INSTANCE_NAME
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result queryTasksByGroupIdUsingGET(
            final int pageNo,
            final int pageSize,
            final Integer groupId,
            final String processInstanceName,
            final Integer status,
            final String taskInstanceName) throws ApiException, IOException {
        HttpRequest request = buildQueryTasksByGroupIdUsingGETRequest(pageNo, pageSize, groupId,
                processInstanceName, status, taskInstanceName);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleQueryTasksByGroupIdUsingGETResponse(context);
    }

    /**
     * QUERY_ALL_TASKS_NOTES.
     * @param  pageNo  Required parameter: 页码号
     * @param  pageSize  Required parameter: 页大小
     * @param  groupId  Optional parameter: GROUP_ID
     * @param  processInstanceName  Optional parameter: 流程实例名称
     * @param  status  Optional parameter: STATUS
     * @param  taskInstanceName  Optional parameter: TASK_INSTANCE_NAME
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> queryTasksByGroupIdUsingGETAsync(
            final int pageNo,
            final int pageSize,
            final Integer groupId,
            final String processInstanceName,
            final Integer status,
            final String taskInstanceName) {
        return makeHttpCallAsync(() -> buildQueryTasksByGroupIdUsingGETRequest(pageNo, pageSize,
                groupId, processInstanceName, status, taskInstanceName),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleQueryTasksByGroupIdUsingGETResponse(context));
    }

    /**
     * Builds the HttpRequest object for queryTasksByGroupIdUsingGET.
     */
    private HttpRequest buildQueryTasksByGroupIdUsingGETRequest(
            final int pageNo,
            final int pageSize,
            final Integer groupId,
            final String processInstanceName,
            final Integer status,
            final String taskInstanceName) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/task-group/query-list-by-group-id");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("pageNo", pageNo);
        queryParameters.put("pageSize", pageSize);
        queryParameters.put("groupId",
                (groupId != null) ? groupId : -1);
        queryParameters.put("processInstanceName", processInstanceName);
        queryParameters.put("status", status);
        queryParameters.put("taskInstanceName", taskInstanceName);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for queryTasksByGroupIdUsingGET.
     * @return An object of type Result
     */
    private Result handleQueryTasksByGroupIdUsingGETResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * QUERY_TASK_GROUP_LIST_BY_PROJECT_ID_NOTES.
     * @param  pageNo  Required parameter: 页码号
     * @param  pageSize  Required parameter: 页大小
     * @param  projectCode  Required parameter: 项目Code
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result queryTaskGroupByCodeUsingGET(
            final int pageNo,
            final int pageSize,
            final String projectCode) throws ApiException, IOException {
        HttpRequest request = buildQueryTaskGroupByCodeUsingGETRequest(pageNo, pageSize,
                projectCode);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleQueryTaskGroupByCodeUsingGETResponse(context);
    }

    /**
     * QUERY_TASK_GROUP_LIST_BY_PROJECT_ID_NOTES.
     * @param  pageNo  Required parameter: 页码号
     * @param  pageSize  Required parameter: 页大小
     * @param  projectCode  Required parameter: 项目Code
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> queryTaskGroupByCodeUsingGETAsync(
            final int pageNo,
            final int pageSize,
            final String projectCode) {
        return makeHttpCallAsync(() -> buildQueryTaskGroupByCodeUsingGETRequest(pageNo, pageSize,
                projectCode),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleQueryTaskGroupByCodeUsingGETResponse(context));
    }

    /**
     * Builds the HttpRequest object for queryTaskGroupByCodeUsingGET.
     */
    private HttpRequest buildQueryTaskGroupByCodeUsingGETRequest(
            final int pageNo,
            final int pageSize,
            final String projectCode) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/task-group/query-list-by-projectCode");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("pageNo", pageNo);
        queryParameters.put("pageSize", pageSize);
        queryParameters.put("projectCode", projectCode);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for queryTaskGroupByCodeUsingGET.
     * @return An object of type Result
     */
    private Result handleQueryTaskGroupByCodeUsingGETResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * QUERY_TASK_GROUP_LIST_BY_STATUS_NOTES.
     * @param  pageNo  Required parameter: 页码号
     * @param  pageSize  Required parameter: 页大小
     * @param  status  Required parameter: status
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result queryTaskGroupByStatusUsingGET(
            final int pageNo,
            final int pageSize,
            final int status) throws ApiException, IOException {
        HttpRequest request = buildQueryTaskGroupByStatusUsingGETRequest(pageNo, pageSize, status);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleQueryTaskGroupByStatusUsingGETResponse(context);
    }

    /**
     * QUERY_TASK_GROUP_LIST_BY_STATUS_NOTES.
     * @param  pageNo  Required parameter: 页码号
     * @param  pageSize  Required parameter: 页大小
     * @param  status  Required parameter: status
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> queryTaskGroupByStatusUsingGETAsync(
            final int pageNo,
            final int pageSize,
            final int status) {
        return makeHttpCallAsync(() -> buildQueryTaskGroupByStatusUsingGETRequest(pageNo, pageSize,
                status),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleQueryTaskGroupByStatusUsingGETResponse(context));
    }

    /**
     * Builds the HttpRequest object for queryTaskGroupByStatusUsingGET.
     */
    private HttpRequest buildQueryTaskGroupByStatusUsingGETRequest(
            final int pageNo,
            final int pageSize,
            final int status) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/task-group/query-list-by-status");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("pageNo", pageNo);
        queryParameters.put("pageSize", pageSize);
        queryParameters.put("status", status);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for queryTaskGroupByStatusUsingGET.
     * @return An object of type Result
     */
    private Result handleQueryTaskGroupByStatusUsingGETResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * START_TASK_GROUP_NOTES.
     * @param  id  Required parameter: ID
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result startTaskGroupUsingPOST(
            final int id) throws ApiException, IOException {
        HttpRequest request = buildStartTaskGroupUsingPOSTRequest(id);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleStartTaskGroupUsingPOSTResponse(context);
    }

    /**
     * START_TASK_GROUP_NOTES.
     * @param  id  Required parameter: ID
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> startTaskGroupUsingPOSTAsync(
            final int id) {
        return makeHttpCallAsync(() -> buildStartTaskGroupUsingPOSTRequest(id),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleStartTaskGroupUsingPOSTResponse(context));
    }

    /**
     * Builds the HttpRequest object for startTaskGroupUsingPOST.
     */
    private HttpRequest buildStartTaskGroupUsingPOSTRequest(
            final int id) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/task-group/start-task-group");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("id", id);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for startTaskGroupUsingPOST.
     * @return An object of type Result
     */
    private Result handleStartTaskGroupUsingPOSTResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * UPDATE_TASK_GROUP_NOTE.
     * @param  description  Optional parameter: DESCRIPTION
     * @param  groupSize  Optional parameter: GROUPSIZE
     * @param  id  Optional parameter: id
     * @param  name  Optional parameter: NAME
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result updateTaskGroupUsingPOST(
            final String description,
            final Integer groupSize,
            final Integer id,
            final String name) throws ApiException, IOException {
        HttpRequest request = buildUpdateTaskGroupUsingPOSTRequest(description, groupSize, id,
                name);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleUpdateTaskGroupUsingPOSTResponse(context);
    }

    /**
     * UPDATE_TASK_GROUP_NOTE.
     * @param  description  Optional parameter: DESCRIPTION
     * @param  groupSize  Optional parameter: GROUPSIZE
     * @param  id  Optional parameter: id
     * @param  name  Optional parameter: NAME
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> updateTaskGroupUsingPOSTAsync(
            final String description,
            final Integer groupSize,
            final Integer id,
            final String name) {
        return makeHttpCallAsync(() -> buildUpdateTaskGroupUsingPOSTRequest(description, groupSize,
                id, name),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleUpdateTaskGroupUsingPOSTResponse(context));
    }

    /**
     * Builds the HttpRequest object for updateTaskGroupUsingPOST.
     */
    private HttpRequest buildUpdateTaskGroupUsingPOSTRequest(
            final String description,
            final Integer groupSize,
            final Integer id,
            final String name) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/task-group/update");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("description", description);
        queryParameters.put("groupSize", groupSize);
        queryParameters.put("id", id);
        queryParameters.put("name", name);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for updateTaskGroupUsingPOST.
     * @return An object of type Result
     */
    private Result handleUpdateTaskGroupUsingPOSTResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

}