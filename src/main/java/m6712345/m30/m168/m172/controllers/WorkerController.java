/*
 * DolphinSchedulerApiDocsLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package m6712345.m30.m168.m172.controllers;

import java.io.IOException;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import m6712345.m30.m168.m172.ApiHelper;
import m6712345.m30.m168.m172.AuthManager;
import m6712345.m30.m168.m172.Configuration;
import m6712345.m30.m168.m172.exceptions.ApiException;
import m6712345.m30.m168.m172.http.Headers;
import m6712345.m30.m168.m172.http.client.HttpClient;
import m6712345.m30.m168.m172.http.client.HttpContext;
import m6712345.m30.m168.m172.http.request.HttpRequest;
import m6712345.m30.m168.m172.http.response.HttpResponse;
import m6712345.m30.m168.m172.http.response.HttpStringResponse;
import m6712345.m30.m168.m172.models.Result;

/**
 * This class lists all the endpoints of the groups.
 */
public final class WorkerController extends BaseController {

    /**
     * Initializes the controller.
     * @param config    Configurations added in client.
     * @param httpClient    Send HTTP requests and read the responses.
     * @param authManagers    Apply authorization to requests.
     */
    public WorkerController(Configuration config, HttpClient httpClient,
            Map<String, AuthManager> authManagers) {
        super(config, httpClient, authManagers);
    }


    /**
     * Worker分组管理.
     * @param  pageNo  Required parameter: 页码号
     * @param  pageSize  Required parameter: 页大小
     * @param  searchVal  Optional parameter: 搜索值
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result queryAllWorkerGroupsPagingUsingGET(
            final int pageNo,
            final int pageSize,
            final String searchVal) throws ApiException, IOException {
        HttpRequest request = buildQueryAllWorkerGroupsPagingUsingGETRequest(pageNo, pageSize,
                searchVal);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleQueryAllWorkerGroupsPagingUsingGETResponse(context);
    }

    /**
     * Worker分组管理.
     * @param  pageNo  Required parameter: 页码号
     * @param  pageSize  Required parameter: 页大小
     * @param  searchVal  Optional parameter: 搜索值
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> queryAllWorkerGroupsPagingUsingGETAsync(
            final int pageNo,
            final int pageSize,
            final String searchVal) {
        return makeHttpCallAsync(() -> buildQueryAllWorkerGroupsPagingUsingGETRequest(pageNo,
                pageSize, searchVal),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleQueryAllWorkerGroupsPagingUsingGETResponse(context));
    }

    /**
     * Builds the HttpRequest object for queryAllWorkerGroupsPagingUsingGET.
     */
    private HttpRequest buildQueryAllWorkerGroupsPagingUsingGETRequest(
            final int pageNo,
            final int pageSize,
            final String searchVal) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/worker-groups");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("pageNo", pageNo);
        queryParameters.put("pageSize", pageSize);
        queryParameters.put("searchVal", searchVal);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for queryAllWorkerGroupsPagingUsingGET.
     * @return An object of type Result
     */
    private Result handleQueryAllWorkerGroupsPagingUsingGETResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * 创建Worker分组.
     * @param  addrList  Required parameter: worker地址列表
     * @param  name  Required parameter: Worker分组名称
     * @param  id  Optional parameter: Worker Server分组ID
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result saveWorkerGroupUsingPOST(
            final String addrList,
            final String name,
            final Integer id) throws ApiException, IOException {
        HttpRequest request = buildSaveWorkerGroupUsingPOSTRequest(addrList, name, id);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleSaveWorkerGroupUsingPOSTResponse(context);
    }

    /**
     * 创建Worker分组.
     * @param  addrList  Required parameter: worker地址列表
     * @param  name  Required parameter: Worker分组名称
     * @param  id  Optional parameter: Worker Server分组ID
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> saveWorkerGroupUsingPOSTAsync(
            final String addrList,
            final String name,
            final Integer id) {
        return makeHttpCallAsync(() -> buildSaveWorkerGroupUsingPOSTRequest(addrList, name, id),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleSaveWorkerGroupUsingPOSTResponse(context));
    }

    /**
     * Builds the HttpRequest object for saveWorkerGroupUsingPOST.
     */
    private HttpRequest buildSaveWorkerGroupUsingPOSTRequest(
            final String addrList,
            final String name,
            final Integer id) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/worker-groups");

        //load all query parameters
        Map<String, Object> queryParameters = new HashMap<>();
        queryParameters.put("addrList", addrList);
        queryParameters.put("name", name);
        queryParameters.put("id",
                (id != null) ? id : 0);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("Content-Type", "application/json");
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().post(queryBuilder, headers, queryParameters,
                null);

        return request;
    }

    /**
     * Processes the response for saveWorkerGroupUsingPOST.
     * @return An object of type Result
     */
    private Result handleSaveWorkerGroupUsingPOSTResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * 查询worker group分组.
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result queryAllWorkerGroupsUsingGET() throws ApiException, IOException {
        HttpRequest request = buildQueryAllWorkerGroupsUsingGETRequest();
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleQueryAllWorkerGroupsUsingGETResponse(context);
    }

    /**
     * 查询worker group分组.
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> queryAllWorkerGroupsUsingGETAsync() {
        return makeHttpCallAsync(() -> buildQueryAllWorkerGroupsUsingGETRequest(),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleQueryAllWorkerGroupsUsingGETResponse(context));
    }

    /**
     * Builds the HttpRequest object for queryAllWorkerGroupsUsingGET.
     */
    private HttpRequest buildQueryAllWorkerGroupsUsingGETRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/worker-groups/all");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for queryAllWorkerGroupsUsingGET.
     * @return An object of type Result
     */
    private Result handleQueryAllWorkerGroupsUsingGETResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * 查询worker地址列表.
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result queryWorkerAddressListUsingGET() throws ApiException, IOException {
        HttpRequest request = buildQueryWorkerAddressListUsingGETRequest();
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleQueryWorkerAddressListUsingGETResponse(context);
    }

    /**
     * 查询worker地址列表.
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> queryWorkerAddressListUsingGETAsync() {
        return makeHttpCallAsync(() -> buildQueryWorkerAddressListUsingGETRequest(),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleQueryWorkerAddressListUsingGETResponse(context));
    }

    /**
     * Builds the HttpRequest object for queryWorkerAddressListUsingGET.
     */
    private HttpRequest buildQueryWorkerAddressListUsingGETRequest() {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/worker-groups/worker-address-list");

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().get(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for queryWorkerAddressListUsingGET.
     * @return An object of type Result
     */
    private Result handleQueryWorkerAddressListUsingGETResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        if (responseCode == 404) {
            throw new ApiException("Not Found", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

    /**
     * 通过ID删除worker group.
     * @param  id  Required parameter: Worker Server分组ID
     * @return    Returns the Result response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Result deleteByIdUsingDELETE(
            final int id) throws ApiException, IOException {
        HttpRequest request = buildDeleteByIdUsingDELETERequest(id);
        HttpResponse response = getClientInstance().execute(request, false);
        HttpContext context = new HttpContext(request, response);

        return handleDeleteByIdUsingDELETEResponse(context);
    }

    /**
     * 通过ID删除worker group.
     * @param  id  Required parameter: Worker Server分组ID
     * @return    Returns the Result response from the API call
     */
    public CompletableFuture<Result> deleteByIdUsingDELETEAsync(
            final int id) {
        return makeHttpCallAsync(() -> buildDeleteByIdUsingDELETERequest(id),
            request -> getClientInstance().executeAsync(request, false),
            context -> handleDeleteByIdUsingDELETEResponse(context));
    }

    /**
     * Builds the HttpRequest object for deleteByIdUsingDELETE.
     */
    private HttpRequest buildDeleteByIdUsingDELETERequest(
            final int id) {
        //the base uri for api requests
        String baseUri = config.getBaseUri();

        //prepare query string for API call
        final StringBuilder queryBuilder = new StringBuilder(baseUri
                + "/worker-groups/{id}");

        //process template parameters
        Map<String, SimpleEntry<Object, Boolean>> templateParameters = new HashMap<>();
        templateParameters.put("id",
                new SimpleEntry<Object, Boolean>(id, true));
        ApiHelper.appendUrlWithTemplateParameters(queryBuilder, templateParameters);

        //load all headers for the outgoing API request
        Headers headers = new Headers();
        headers.add("user-agent", BaseController.userAgent);
        headers.add("accept", "application/json");

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = getClientInstance().delete(queryBuilder, headers, null, null);

        return request;
    }

    /**
     * Processes the response for deleteByIdUsingDELETE.
     * @return An object of type Result
     */
    private Result handleDeleteByIdUsingDELETEResponse(
            HttpContext context) throws ApiException, IOException {
        HttpResponse response = context.getResponse();

        //Error handling using HTTP status codes
        int responseCode = response.getStatusCode();

        if (responseCode == 401) {
            throw new ApiException("Unauthorized", context);
        }
        if (responseCode == 403) {
            throw new ApiException("Forbidden", context);
        }
        //handle errors defined at the API level
        validateResponse(response, context);

        //extract result from the http response
        String responseBody = ((HttpStringResponse) response).getBody();
        Result result = ApiHelper.deserialize(responseBody,
                Result.class);

        return result;
    }

}